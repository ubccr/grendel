// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { PatchV1AuthResetData, PatchV1AuthResetError, PatchV1AuthResetResponse, PostV1AuthSigninData, PostV1AuthSigninError, PostV1AuthSigninResponse, DeleteV1AuthSignoutData, DeleteV1AuthSignoutError, DeleteV1AuthSignoutResponse, PostV1AuthSignupData, PostV1AuthSignupError, PostV1AuthSignupResponse, PostV1AuthTokenData, PostV1AuthTokenError, PostV1AuthTokenResponse, GetV1BmcData, GetV1BmcError, GetV1BmcResponse, PostV1BmcConfigureAutoData, PostV1BmcConfigureAutoError, PostV1BmcConfigureAutoResponse, PostV1BmcConfigureImportData, PostV1BmcConfigureImportError, PostV1BmcConfigureImportResponse, GetV1BmcJobsData, GetV1BmcJobsError, GetV1BmcJobsResponse, DeleteV1BmcJobsJidsData, DeleteV1BmcJobsJidsError, DeleteV1BmcJobsJidsResponse, GetV1BmcMetricsData, GetV1BmcMetricsError, GetV1BmcMetricsResponse, PostV1BmcPowerBmcData, PostV1BmcPowerBmcError, PostV1BmcPowerBmcResponse, PostV1BmcPowerOsData, PostV1BmcPowerOsError, PostV1BmcPowerOsResponse, DeleteV1BmcSelData, DeleteV1BmcSelError, DeleteV1BmcSelResponse, GetV1DbDumpData, GetV1DbDumpError, GetV1DbDumpResponse, PostV1DbRestoreData, PostV1DbRestoreError, PostV1DbRestoreResponse, GetV1GrendelEventsData, GetV1GrendelEventsError, GetV1GrendelEventsResponse, DeleteV1ImagesData, DeleteV1ImagesError, DeleteV1ImagesResponse, GetV1ImagesData, GetV1ImagesError, GetV1ImagesResponse, PostV1ImagesData, PostV1ImagesError, PostV1ImagesResponse, GetV1ImagesFindData, GetV1ImagesFindError, GetV1ImagesFindResponse, DeleteV1NodesData, DeleteV1NodesError, DeleteV1NodesResponse, GetV1NodesData, GetV1NodesError, GetV1NodesResponse, PostV1NodesData, PostV1NodesError, PostV1NodesResponse, GetV1NodesFindData, GetV1NodesFindError, GetV1NodesFindResponse, PatchV1NodesImageData, PatchV1NodesImageError, PatchV1NodesImageResponse, PatchV1NodesProvisionData, PatchV1NodesProvisionError, PatchV1NodesProvisionResponse, PatchV1NodesTagsActionData, PatchV1NodesTagsActionError, PatchV1NodesTagsActionResponse, GetV1NodesTokenInterfaceData, GetV1NodesTokenInterfaceError, GetV1NodesTokenInterfaceResponse, GetV1RolesData, GetV1RolesError, GetV1RolesResponse, PatchV1RolesData, PatchV1RolesError, PatchV1RolesResponse, PostV1RolesData, PostV1RolesError, PostV1RolesResponse, DeleteV1RolesNamesData, DeleteV1RolesNamesError, DeleteV1RolesNamesResponse, GetV1SwitchNodesetLldpData, GetV1SwitchNodesetLldpError, GetV1SwitchNodesetLldpResponse, GetV1UsersData, GetV1UsersError, GetV1UsersResponse, PostV1UsersData, PostV1UsersError, PostV1UsersResponse, DeleteV1UsersUsernamesData, DeleteV1UsersUsernamesError, DeleteV1UsersUsernamesResponse, PatchV1UsersUsernamesEnableData, PatchV1UsersUsernamesEnableError, PatchV1UsersUsernamesEnableResponse, PatchV1UsersUsernamesRoleData, PatchV1UsersUsernamesRoleError, PatchV1UsersUsernamesRoleResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * auth reset
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).AuthReset`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Change password
 */
export const patchV1AuthReset = <ThrowOnError extends boolean = false>(options: Options<PatchV1AuthResetData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1AuthResetResponse, PatchV1AuthResetError, ThrowOnError>({
    ...options,
    url: '/v1/auth/reset'
}); };

/**
 * auth signin
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).AuthSignin`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 * signin user
 */
export const postV1AuthSignin = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthSigninData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1AuthSigninResponse, PostV1AuthSigninError, ThrowOnError>({
    ...options,
    url: '/v1/auth/signin'
}); };

/**
 * auth signout
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).AuthSignout`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 * Signout user
 */
export const deleteV1AuthSignout = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1AuthSignoutData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1AuthSignoutResponse, DeleteV1AuthSignoutError, ThrowOnError>({
    ...options,
    url: '/v1/auth/signout'
}); };

/**
 * auth signup
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).AuthSignup`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 *
 * ---
 *
 * Signup user
 */
export const postV1AuthSignup = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthSignupData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1AuthSignupResponse, PostV1AuthSignupError, ThrowOnError>({
    ...options,
    url: '/v1/auth/signup'
}); };

/**
 * auth token
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).AuthToken`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Create API token
 */
export const postV1AuthToken = <ThrowOnError extends boolean = false>(options: Options<PostV1AuthTokenData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1AuthTokenResponse, PostV1AuthTokenError, ThrowOnError>({
    ...options,
    url: '/v1/auth/token'
}); };

/**
 * bmc query
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcQuery`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get redfish info from node(s)
 */
export const getV1Bmc = <ThrowOnError extends boolean = false>(options?: Options<GetV1BmcData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1BmcResponse, GetV1BmcError, ThrowOnError>({
    ...options,
    url: '/v1/bmc'
}); };

/**
 * bmc auto configure
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcAutoConfigure`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Set BMC to autoconfigure
 */
export const postV1BmcConfigureAuto = <ThrowOnError extends boolean = false>(options?: Options<PostV1BmcConfigureAutoData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1BmcConfigureAutoResponse, PostV1BmcConfigureAutoError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/configure/auto'
}); };

/**
 * bmc import configuration
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcImportConfiguration`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Manually import system configuration to BMC
 */
export const postV1BmcConfigureImport = <ThrowOnError extends boolean = false>(options: Options<PostV1BmcConfigureImportData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1BmcConfigureImportResponse, PostV1BmcConfigureImportError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/configure/import'
}); };

/**
 * bmc job list
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcJobList`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get redfish jobs from node(s)
 */
export const getV1BmcJobs = <ThrowOnError extends boolean = false>(options?: Options<GetV1BmcJobsData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1BmcJobsResponse, GetV1BmcJobsError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/jobs'
}); };

/**
 * bmc job delete
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcJobDelete`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Delete redfish jobs from node(s) by JID
 */
export const deleteV1BmcJobsJids = <ThrowOnError extends boolean = false>(options: Options<DeleteV1BmcJobsJidsData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1BmcJobsJidsResponse, DeleteV1BmcJobsJidsError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/jobs/{jids}'
}); };

/**
 * bmc metric reports
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcMetricReports`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get metric reports by nodeset
 */
export const getV1BmcMetrics = <ThrowOnError extends boolean = false>(options?: Options<GetV1BmcMetricsData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1BmcMetricsResponse, GetV1BmcMetricsError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/metrics'
}); };

/**
 * bmc power
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcPower`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Reboot node(s) BMC
 */
export const postV1BmcPowerBmc = <ThrowOnError extends boolean = false>(options?: Options<PostV1BmcPowerBmcData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1BmcPowerBmcResponse, PostV1BmcPowerBmcError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/power/bmc'
}); };

/**
 * bmc os power
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcOsPower`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Change power status of node(s)
 */
export const postV1BmcPowerOs = <ThrowOnError extends boolean = false>(options: Options<PostV1BmcPowerOsData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1BmcPowerOsResponse, PostV1BmcPowerOsError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/power/os'
}); };

/**
 * bmc sel clear
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BmcSelClear`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Clear system event log on node(s)
 */
export const deleteV1BmcSel = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1BmcSelData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1BmcSelResponse, DeleteV1BmcSelError, ThrowOnError>({
    ...options,
    url: '/v1/bmc/sel'
}); };

/**
 * dump
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).Dump`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get a backup of the DB
 */
export const getV1DbDump = <ThrowOnError extends boolean = false>(options?: Options<GetV1DbDumpData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1DbDumpResponse, GetV1DbDumpError, ThrowOnError>({
    ...options,
    url: '/v1/db/dump'
}); };

/**
 * restore
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).Restore`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Restore a backup of the DB
 */
export const postV1DbRestore = <ThrowOnError extends boolean = false>(options: Options<PostV1DbRestoreData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1DbRestoreResponse, PostV1DbRestoreError, ThrowOnError>({
    ...options,
    url: '/v1/db/restore'
}); };

/**
 * get events
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).GetEvents`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 *
 */
export const getV1GrendelEvents = <ThrowOnError extends boolean = false>(options?: Options<GetV1GrendelEventsData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1GrendelEventsResponse, GetV1GrendelEventsError, ThrowOnError>({
    ...options,
    url: '/v1/grendel/events'
}); };

/**
 * boot image delete
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BootImageDelete`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Delete images by name
 */
export const deleteV1Images = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1ImagesData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1ImagesResponse, DeleteV1ImagesError, ThrowOnError>({
    ...options,
    url: '/v1/images'
}); };

/**
 * boot image list
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BootImageList`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * List all images
 */
export const getV1Images = <ThrowOnError extends boolean = false>(options?: Options<GetV1ImagesData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1ImagesResponse, GetV1ImagesError, ThrowOnError>({
    ...options,
    url: '/v1/images'
}); };

/**
 * boot image add
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BootImageAdd`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Add images
 */
export const postV1Images = <ThrowOnError extends boolean = false>(options: Options<PostV1ImagesData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1ImagesResponse, PostV1ImagesError, ThrowOnError>({
    ...options,
    url: '/v1/images'
}); };

/**
 * boot image find
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).BootImageFind`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Find images by name
 */
export const getV1ImagesFind = <ThrowOnError extends boolean = false>(options?: Options<GetV1ImagesFindData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1ImagesFindResponse, GetV1ImagesFindError, ThrowOnError>({
    ...options,
    url: '/v1/images/find'
}); };

/**
 * node delete
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeDelete`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Delete nodes by nodeset and/or tags
 */
export const deleteV1Nodes = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1NodesData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1NodesResponse, DeleteV1NodesError, ThrowOnError>({
    ...options,
    url: '/v1/nodes'
}); };

/**
 * node list
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeList`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * List all nodes
 */
export const getV1Nodes = <ThrowOnError extends boolean = false>(options?: Options<GetV1NodesData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1NodesResponse, GetV1NodesError, ThrowOnError>({
    ...options,
    url: '/v1/nodes'
}); };

/**
 * node add
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeAdd`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Add nodes
 */
export const postV1Nodes = <ThrowOnError extends boolean = false>(options: Options<PostV1NodesData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1NodesResponse, PostV1NodesError, ThrowOnError>({
    ...options,
    url: '/v1/nodes'
}); };

/**
 * node find
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeFind`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Find nodes by nodeset and/or tags
 */
export const getV1NodesFind = <ThrowOnError extends boolean = false>(options?: Options<GetV1NodesFindData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1NodesFindResponse, GetV1NodesFindError, ThrowOnError>({
    ...options,
    url: '/v1/nodes/find'
}); };

/**
 * node boot image
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeBootImage`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Update nodes boot image by nodeset and/or tags
 */
export const patchV1NodesImage = <ThrowOnError extends boolean = false>(options: Options<PatchV1NodesImageData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1NodesImageResponse, PatchV1NodesImageError, ThrowOnError>({
    ...options,
    url: '/v1/nodes/image'
}); };

/**
 * node provision
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeProvision`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Provision / Unprovision nodes by nodeset and/or tags
 */
export const patchV1NodesProvision = <ThrowOnError extends boolean = false>(options: Options<PatchV1NodesProvisionData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1NodesProvisionResponse, PatchV1NodesProvisionError, ThrowOnError>({
    ...options,
    url: '/v1/nodes/provision'
}); };

/**
 * node tags
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeTags`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Update nodes tags by nodeset and/or tags
 */
export const patchV1NodesTagsAction = <ThrowOnError extends boolean = false>(options: Options<PatchV1NodesTagsActionData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1NodesTagsActionResponse, PatchV1NodesTagsActionError, ThrowOnError>({
    ...options,
    url: '/v1/nodes/tags/{action}'
}); };

/**
 * node boot token
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).NodeBootToken`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Create a boot token for the provision server. Used for debugging requests made by images
 */
export const getV1NodesTokenInterface = <ThrowOnError extends boolean = false>(options: Options<GetV1NodesTokenInterfaceData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1NodesTokenInterfaceResponse, GetV1NodesTokenInterfaceError, ThrowOnError>({
    ...options,
    url: '/v1/nodes/token/{interface}'
}); };

/**
 * get roles
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).GetRoles`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get roles and permissions
 */
export const getV1Roles = <ThrowOnError extends boolean = false>(options?: Options<GetV1RolesData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1RolesResponse, GetV1RolesError, ThrowOnError>({
    ...options,
    url: '/v1/roles'
}); };

/**
 * patch roles
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).PatchRoles`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Edit role permissions
 */
export const patchV1Roles = <ThrowOnError extends boolean = false>(options: Options<PatchV1RolesData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1RolesResponse, PatchV1RolesError, ThrowOnError>({
    ...options,
    url: '/v1/roles'
}); };

/**
 * post roles
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).PostRoles`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Add roles
 */
export const postV1Roles = <ThrowOnError extends boolean = false>(options: Options<PostV1RolesData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1RolesResponse, PostV1RolesError, ThrowOnError>({
    ...options,
    url: '/v1/roles'
}); };

/**
 * delete roles
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).DeleteRoles`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Delete roles
 */
export const deleteV1RolesNames = <ThrowOnError extends boolean = false>(options: Options<DeleteV1RolesNamesData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1RolesNamesResponse, DeleteV1RolesNamesError, ThrowOnError>({
    ...options,
    url: '/v1/roles/{names}'
}); };

/**
 * switch get l l d p
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).SwitchGetLLDP`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Get switch LLDP info
 */
export const getV1SwitchNodesetLldp = <ThrowOnError extends boolean = false>(options: Options<GetV1SwitchNodesetLldpData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1SwitchNodesetLldpResponse, GetV1SwitchNodesetLldpError, ThrowOnError>({
    ...options,
    url: '/v1/switch/{nodeset}/lldp'
}); };

/**
 * user list
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).UserList`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * List all users
 */
export const getV1Users = <ThrowOnError extends boolean = false>(options?: Options<GetV1UsersData, ThrowOnError>) => { return (options?.client ?? client).get<GetV1UsersResponse, GetV1UsersError, ThrowOnError>({
    ...options,
    url: '/v1/users'
}); };

/**
 * user store
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).UserStore`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Add new user
 */
export const postV1Users = <ThrowOnError extends boolean = false>(options: Options<PostV1UsersData, ThrowOnError>) => { return (options?.client ?? client).post<PostV1UsersResponse, PostV1UsersError, ThrowOnError>({
    ...options,
    url: '/v1/users'
}); };

/**
 * user delete
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).UserDelete`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Delete users
 */
export const deleteV1UsersUsernames = <ThrowOnError extends boolean = false>(options: Options<DeleteV1UsersUsernamesData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteV1UsersUsernamesResponse, DeleteV1UsersUsernamesError, ThrowOnError>({
    ...options,
    url: '/v1/users/{usernames}'
}); };

/**
 * user enable
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).UserEnable`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Update users enable
 */
export const patchV1UsersUsernamesEnable = <ThrowOnError extends boolean = false>(options: Options<PatchV1UsersUsernamesEnableData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1UsersUsernamesEnableResponse, PatchV1UsersUsernamesEnableError, ThrowOnError>({
    ...options,
    url: '/v1/users/{usernames}/enable'
}); };

/**
 * user role
 * #### Controller:
 *
 * `github.com/ubccr/grendel/internal/api.(*Handler).UserRole`
 *
 * #### Middlewares:
 *
 * - `github.com/go-fuego/fuego.defaultLogger.middleware`
 * - `github.com/ubccr/grendel/internal/api.(*Handler).authMiddleware`
 *
 * ---
 *
 * Update users role
 */
export const patchV1UsersUsernamesRole = <ThrowOnError extends boolean = false>(options: Options<PatchV1UsersUsernamesRoleData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchV1UsersUsernamesRoleResponse, PatchV1UsersUsernamesRoleError, ThrowOnError>({
    ...options,
    url: '/v1/users/{usernames}/role'
}); };