// This file is auto-generated by @hey-api/openapi-ts

export const AuthRequestSchema = {
    description: 'AuthRequest schema',
    properties: {
        password: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const AuthResetRequestSchema = {
    description: 'AuthResetRequest schema',
    properties: {
        current_password: {
            type: 'string'
        },
        new_password: {
            minLength: 8,
            type: 'string'
        }
    },
    required: ['new_password'],
    type: 'object'
} as const;

export const AuthResponseSchema = {
    description: 'AuthResponse schema',
    properties: {
        expire: {
            format: 'int64',
            type: 'integer'
        },
        role: {
            type: 'string'
        },
        token: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const AuthSignupRequestSchema = {
    description: 'AuthSignupRequest schema',
    properties: {
        password: {
            minLength: 8,
            type: 'string'
        },
        username: {
            minLength: 2,
            type: 'string'
        }
    },
    required: ['username', 'password'],
    type: 'object'
} as const;

export const AuthTokenReponseSchema = {
    description: 'AuthTokenReponse schema',
    properties: {
        token: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const AuthTokenRequestSchema = {
    description: 'AuthTokenRequest schema',
    properties: {
        expire: {
            description: 'string parsed by time.ParseDuration, examples include: infinite, 8h, 30m, 20s',
            example: 'infinite',
            type: 'string'
        },
        role: {
            description: 'type of model.Role, valid options: disabled, user, admin',
            example: 'admin',
            type: 'string'
        },
        username: {
            description: 'username shown in logs, does not need to be a valid user in the DB',
            example: 'user1:CLI',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const BmcDellInstallFromRepoRequestSchema = {
    description: 'BmcDellInstallFromRepoRequest schema',
    properties: {
        ApplyUpdate: {
            description: 'ApplyUpdate false will only check for firmware upgrades. true will queue the update installs as a job.',
            type: 'boolean'
        },
        CatalogFile: {
            type: 'string'
        },
        ClearJobQueue: {
            description: 'clear job queue before submitting request. ApplyUpdate must be true',
            type: 'boolean'
        },
        IPAddress: {
            description: 'domain name or IP address of share',
            type: 'string'
        },
        IgnoreCertWarning: {
            description: 'false = share needs valid HTTPS cert, true = allow invalid certs',
            type: 'boolean'
        },
        RebootNeeded: {
            description: 'false = do not reboot node automatically, jobs will queue as scheduled and wait until next boot. true = reboot when needed',
            type: 'boolean'
        },
        ShareName: {
            type: 'string'
        },
        ShareType: {
            description: 'type of share',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const BmcImportConfigurationRequestSchema = {
    description: 'BmcImportConfigurationRequest schema',
    properties: {
        file: {
            description: 'template file relative to templates directory',
            example: 'idrac-config.json.tmpl',
            type: 'string'
        },
        shutdown_type: {
            description: 'options include: NoReboot, Graceful, Forced',
            example: 'Graceful',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const BmcJobDeleteRequestSchema = {
    description: 'BmcJobDeleteRequest schema',
    properties: {
        node_job_list: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array'
            },
            description: "Map with Node and Redfish Job IDs. Use 'JID_CLEARALL' to clear all jobs",
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const BmcOsPowerBodySchema = {
    description: 'BmcOsPowerBody schema',
    properties: {
        boot_option: {
            description: 'string of type redfish.BootSourceOverrideTarget. Common options include: None, Pxe, BiosSetup, Utilities, Diags',
            example: 'Pxe',
            type: 'string'
        },
        power_option: {
            description: 'string of type redfish.ResetType. Common options include: On, ForceOn, ForceOff, ForceRestart, GracefulRestart, GracefulShutdown, PowerCycle',
            example: 'PowerCycle',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const BootImageSchema = {
    description: 'BootImage schema',
    properties: {
        cmdline: {
            type: 'string'
        },
        id: {
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        initrd: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        kernel: {
            type: 'string'
        },
        liveimg: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        provision_templates: {
            additionalProperties: {
                nullable: true,
                type: 'string'
            },
            nullable: true,
            type: 'object'
        },
        uid: {
            nullable: true,
            type: 'string'
        },
        verify: {
            type: 'boolean'
        }
    },
    required: ['name', 'kernel'],
    type: 'object'
} as const;

export const BootImageAddRequestSchema = {
    description: 'BootImageAddRequest schema',
    properties: {
        boot_images: {
            items: {
                nullable: true,
                properties: {
                    cmdline: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    initrd: {
                        items: {
                            type: 'string'
                        },
                        type: 'array'
                    },
                    kernel: {
                        type: 'string'
                    },
                    liveimg: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    },
                    provision_templates: {
                        additionalProperties: {
                            nullable: true,
                            type: 'string'
                        },
                        nullable: true,
                        type: 'object'
                    },
                    uid: {
                        nullable: true,
                        type: 'string'
                    },
                    verify: {
                        type: 'boolean'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const DataDumpSchema = {
    description: 'DataDump schema',
    properties: {
        Hosts: {
            items: {
                nullable: true,
                properties: {
                    bonds: {
                        items: {
                            nullable: true,
                            properties: {
                                bmc: {
                                    type: 'boolean'
                                },
                                fqdn: {
                                    type: 'string'
                                },
                                id: {
                                    format: 'int64',
                                    nullable: true,
                                    type: 'integer'
                                },
                                ifname: {
                                    type: 'string'
                                },
                                ip: {
                                    type: 'string'
                                },
                                mac: {
                                    type: 'string'
                                },
                                mtu: {
                                    maximum: 65535,
                                    minimum: 0,
                                    type: 'integer'
                                },
                                peers: {
                                    items: {
                                        type: 'string'
                                    },
                                    type: 'array'
                                },
                                vlan: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    boot_image: {
                        type: 'string'
                    },
                    firmware: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    interfaces: {
                        items: {
                            nullable: true,
                            properties: {
                                bmc: {
                                    type: 'boolean'
                                },
                                fqdn: {
                                    type: 'string'
                                },
                                id: {
                                    format: 'int64',
                                    nullable: true,
                                    type: 'integer'
                                },
                                ifname: {
                                    type: 'string'
                                },
                                ip: {
                                    type: 'string'
                                },
                                mac: {
                                    type: 'string'
                                },
                                mtu: {
                                    maximum: 65535,
                                    minimum: 0,
                                    type: 'integer'
                                },
                                vlan: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    name: {
                        type: 'string'
                    },
                    provision: {
                        type: 'boolean'
                    },
                    tags: {
                        items: {
                            type: 'string'
                        },
                        nullable: true,
                        type: 'array'
                    },
                    uid: {
                        nullable: true,
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        Images: {
            items: {
                nullable: true,
                properties: {
                    cmdline: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    initrd: {
                        items: {
                            type: 'string'
                        },
                        type: 'array'
                    },
                    kernel: {
                        type: 'string'
                    },
                    liveimg: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    },
                    provision_templates: {
                        additionalProperties: {
                            nullable: true,
                            type: 'string'
                        },
                        nullable: true,
                        type: 'object'
                    },
                    uid: {
                        nullable: true,
                        type: 'string'
                    },
                    verify: {
                        type: 'boolean'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        Users: {
            items: {
                properties: {
                    created_at: {
                        format: 'date-time',
                        type: 'string'
                    },
                    enabled: {
                        type: 'boolean'
                    },
                    hash: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        type: 'integer'
                    },
                    modified_at: {
                        format: 'date-time',
                        type: 'string'
                    },
                    role: {
                        type: 'string'
                    },
                    username: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const EventSchema = {
    description: 'Event schema',
    properties: {
        JobMessages: {
            items: {
                properties: {
                    data: {
                        type: 'string'
                    },
                    host: {
                        type: 'string'
                    },
                    msg: {
                        type: 'string'
                    },
                    redfish_error: {
                        properties: {
                            code: {
                                type: 'string'
                            },
                            error: {
                                properties: {
                                    '@Message.ExtendedInfo': {
                                        items: {
                                            properties: {
                                                Message: {
                                                    type: 'string'
                                                },
                                                'MessageArgs.@odata.count': {
                                                    type: 'integer'
                                                },
                                                MessageId: {
                                                    type: 'string'
                                                },
                                                'RelatedProperties.@odata.count': {
                                                    type: 'integer'
                                                },
                                                Resolution: {
                                                    type: 'string'
                                                },
                                                Severity: {
                                                    type: 'string'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        type: 'array'
                                    },
                                    code: {
                                        type: 'string'
                                    },
                                    message: {
                                        type: 'string'
                                    }
                                },
                                type: 'object'
                            }
                        },
                        type: 'object'
                    },
                    status: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        Message: {
            type: 'string'
        },
        Severity: {
            type: 'string'
        },
        Time: {
            format: 'date-time',
            type: 'string'
        },
        User: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const GenericResponseSchema = {
    description: 'GenericResponse schema',
    properties: {
        changed: {
            type: 'integer'
        },
        detail: {
            type: 'string'
        },
        title: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const GetRolesResponseSchema = {
    description: 'GetRolesResponse schema',
    properties: {
        roles: {
            items: {
                properties: {
                    name: {
                        type: 'string'
                    },
                    permission_list: {
                        items: {
                            properties: {
                                method: {
                                    type: 'string'
                                },
                                path: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    unassigned_permission_list: {
                        items: {
                            properties: {
                                method: {
                                    type: 'string'
                                },
                                path: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const HTTPErrorSchema = {
    description: 'HTTPError schema',
    properties: {
        detail: {
            description: 'Human readable error message',
            nullable: true,
            type: 'string'
        },
        errors: {
            items: {
                properties: {
                    more: {
                        additionalProperties: {},
                        type: 'object'
                    },
                    name: {
                        type: 'string'
                    },
                    reason: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            nullable: true,
            type: 'array'
        },
        instance: {
            nullable: true,
            type: 'string'
        },
        status: {
            description: 'HTTP status code',
            example: 403,
            nullable: true,
            type: 'integer'
        },
        title: {
            description: 'Short title of the error',
            nullable: true,
            type: 'string'
        },
        type: {
            description: 'URL of the error type. Can be used to lookup the error in a documentation',
            nullable: true,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const HostSchema = {
    description: 'Host schema',
    properties: {
        bonds: {
            items: {
                nullable: true,
                properties: {
                    bmc: {
                        type: 'boolean'
                    },
                    fqdn: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    ifname: {
                        type: 'string'
                    },
                    ip: {
                        type: 'string'
                    },
                    mac: {
                        type: 'string'
                    },
                    mtu: {
                        maximum: 65535,
                        minimum: 0,
                        type: 'integer'
                    },
                    peers: {
                        items: {
                            type: 'string'
                        },
                        type: 'array'
                    },
                    vlan: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        boot_image: {
            type: 'string'
        },
        firmware: {
            type: 'string'
        },
        id: {
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        interfaces: {
            items: {
                nullable: true,
                properties: {
                    bmc: {
                        type: 'boolean'
                    },
                    fqdn: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    ifname: {
                        type: 'string'
                    },
                    ip: {
                        type: 'string'
                    },
                    mac: {
                        type: 'string'
                    },
                    mtu: {
                        maximum: 65535,
                        minimum: 0,
                        type: 'integer'
                    },
                    vlan: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        name: {
            type: 'string'
        },
        provision: {
            type: 'boolean'
        },
        tags: {
            items: {
                type: 'string'
            },
            nullable: true,
            type: 'array'
        },
        uid: {
            nullable: true,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const JobMessageSchema = {
    description: 'JobMessage schema',
    properties: {
        data: {
            type: 'string'
        },
        host: {
            type: 'string'
        },
        msg: {
            type: 'string'
        },
        redfish_error: {
            properties: {
                code: {
                    type: 'string'
                },
                error: {
                    properties: {
                        '@Message.ExtendedInfo': {
                            items: {
                                properties: {
                                    Message: {
                                        type: 'string'
                                    },
                                    'MessageArgs.@odata.count': {
                                        type: 'integer'
                                    },
                                    MessageId: {
                                        type: 'string'
                                    },
                                    'RelatedProperties.@odata.count': {
                                        type: 'integer'
                                    },
                                    Resolution: {
                                        type: 'string'
                                    },
                                    Severity: {
                                        type: 'string'
                                    }
                                },
                                type: 'object'
                            },
                            nullable: true,
                            type: 'array'
                        },
                        code: {
                            type: 'string'
                        },
                        message: {
                            type: 'string'
                        }
                    },
                    type: 'object'
                }
            },
            type: 'object'
        },
        status: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const LLDPSchema = {
    description: 'LLDP schema',
    properties: {
        chassis_id: {
            type: 'string'
        },
        chassis_id_type: {
            type: 'string'
        },
        management_address: {
            type: 'string'
        },
        port_description: {
            type: 'string'
        },
        port_id: {
            type: 'string'
        },
        port_id_type: {
            type: 'string'
        },
        port_name: {
            type: 'string'
        },
        system_description: {
            type: 'string'
        },
        system_name: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const NodeAddRequestSchema = {
    description: 'NodeAddRequest schema',
    properties: {
        node_list: {
            items: {
                nullable: true,
                properties: {
                    bonds: {
                        items: {
                            nullable: true,
                            properties: {
                                bmc: {
                                    type: 'boolean'
                                },
                                fqdn: {
                                    type: 'string'
                                },
                                id: {
                                    format: 'int64',
                                    nullable: true,
                                    type: 'integer'
                                },
                                ifname: {
                                    type: 'string'
                                },
                                ip: {
                                    type: 'string'
                                },
                                mac: {
                                    type: 'string'
                                },
                                mtu: {
                                    maximum: 65535,
                                    minimum: 0,
                                    type: 'integer'
                                },
                                peers: {
                                    items: {
                                        type: 'string'
                                    },
                                    type: 'array'
                                },
                                vlan: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    boot_image: {
                        type: 'string'
                    },
                    firmware: {
                        type: 'string'
                    },
                    id: {
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    interfaces: {
                        items: {
                            nullable: true,
                            properties: {
                                bmc: {
                                    type: 'boolean'
                                },
                                fqdn: {
                                    type: 'string'
                                },
                                id: {
                                    format: 'int64',
                                    nullable: true,
                                    type: 'integer'
                                },
                                ifname: {
                                    type: 'string'
                                },
                                ip: {
                                    type: 'string'
                                },
                                mac: {
                                    type: 'string'
                                },
                                mtu: {
                                    maximum: 65535,
                                    minimum: 0,
                                    type: 'integer'
                                },
                                vlan: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    name: {
                        type: 'string'
                    },
                    provision: {
                        type: 'boolean'
                    },
                    tags: {
                        items: {
                            type: 'string'
                        },
                        nullable: true,
                        type: 'array'
                    },
                    uid: {
                        nullable: true,
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const NodeBootImageRequestSchema = {
    description: 'NodeBootImageRequest schema',
    properties: {
        image: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const NodeBootTokenResponseSchema = {
    description: 'NodeBootTokenResponse schema',
    properties: {
        nodes: {
            items: {
                properties: {
                    name: {
                        type: 'string'
                    },
                    token: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const NodeProvisionRequestSchema = {
    description: 'NodeProvisionRequest schema',
    properties: {
        provision: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const NodeTagsRequestSchema = {
    description: 'NodeTagsRequest schema',
    properties: {
        tags: {
            description: 'comma separated list of tags',
            example: 'a01,test',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const PatchRolesRequestSchema = {
    description: 'PatchRolesRequest schema',
    properties: {
        permission_list: {
            items: {
                properties: {
                    method: {
                        type: 'string'
                    },
                    path: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        role: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const PostRolesRequestSchema = {
    description: 'PostRolesRequest schema',
    properties: {
        inherited_role: {
            type: 'string'
        },
        role: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const RedfishDellUpgradeFirmwareSchema = {
    description: 'RedfishDellUpgradeFirmware schema',
    properties: {
        Message: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        UpdateCount: {
            type: 'integer'
        },
        UpdateList: {
            items: {
                properties: {
                    BaseLocation: {
                        type: 'string'
                    },
                    ComponentID: {
                        type: 'string'
                    },
                    ComponentInfoName: {
                        type: 'string'
                    },
                    ComponentInfoValue: {
                        type: 'string'
                    },
                    ComponentType: {
                        type: 'string'
                    },
                    Criticality: {
                        type: 'string'
                    },
                    DisplayName: {
                        type: 'string'
                    },
                    InstalledVersion: {
                        type: 'string'
                    },
                    JobID: {
                        type: 'string'
                    },
                    Name: {
                        type: 'string'
                    },
                    PackageName: {
                        type: 'string'
                    },
                    PackagePath: {
                        type: 'string'
                    },
                    PackageVersion: {
                        type: 'string'
                    },
                    RebootType: {
                        type: 'string'
                    },
                    Target: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        },
        UpdateRebootType: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const RedfishJobSchema = {
    description: 'RedfishJob schema',
    properties: {
        jobs: {
            items: {
                nullable: true,
                properties: {
                    '@odata.context': {
                        type: 'string'
                    },
                    '@odata.id': {
                        type: 'string'
                    },
                    '@odata.type': {
                        type: 'string'
                    },
                    CreatedBy: {
                        type: 'string'
                    },
                    Description: {
                        type: 'string'
                    },
                    EndTime: {
                        type: 'string'
                    },
                    EstimatedDuration: {
                        type: 'string'
                    },
                    HidePayload: {
                        type: 'boolean'
                    },
                    Id: {
                        type: 'string'
                    },
                    JobState: {
                        type: 'string'
                    },
                    JobStatus: {
                        type: 'string'
                    },
                    MaxExecutionTime: {
                        type: 'string'
                    },
                    Messages: {
                        items: {
                            properties: {
                                '@odata.id': {
                                    type: 'string'
                                },
                                Id: {
                                    type: 'string'
                                },
                                Message: {
                                    type: 'string'
                                },
                                MessageArgs: {
                                    items: {
                                        type: 'string'
                                    },
                                    type: 'array'
                                },
                                MessageId: {
                                    type: 'string'
                                },
                                Name: {
                                    type: 'string'
                                },
                                RelatedProperties: {
                                    items: {
                                        nullable: true,
                                        type: 'string'
                                    },
                                    nullable: true,
                                    type: 'array'
                                },
                                Resolution: {
                                    type: 'string'
                                },
                                Severity: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    Name: {
                        type: 'string'
                    },
                    Payload: {
                        properties: {
                            HttpHeaders: {
                                items: {
                                    nullable: true,
                                    type: 'string'
                                },
                                nullable: true,
                                type: 'array'
                            },
                            HttpOperation: {
                                type: 'string'
                            },
                            JsonBody: {
                                type: 'string'
                            },
                            TargetUri: {
                                type: 'string'
                            }
                        },
                        type: 'object'
                    },
                    PercentComplete: {
                        type: 'integer'
                    },
                    Schedule: {
                        properties: {
                            EnabledDaysOfMonth: {
                                items: {
                                    nullable: true,
                                    type: 'integer'
                                },
                                nullable: true,
                                type: 'array'
                            },
                            EnabledDaysOfWeek: {
                                items: {
                                    nullable: true,
                                    type: 'string'
                                },
                                nullable: true,
                                type: 'array'
                            },
                            EnabledIntervals: {
                                items: {
                                    nullable: true,
                                    type: 'string'
                                },
                                nullable: true,
                                type: 'array'
                            },
                            EnabledMonthsOfYear: {
                                items: {
                                    nullable: true,
                                    type: 'string'
                                },
                                nullable: true,
                                type: 'array'
                            },
                            InitialStartTime: {
                                type: 'string'
                            },
                            Lifetime: {
                                type: 'string'
                            },
                            MaxOccurrences: {
                                type: 'integer'
                            },
                            RecurrenceInterval: {
                                type: 'string'
                            }
                        },
                        type: 'object'
                    },
                    StartTime: {
                        type: 'string'
                    },
                    StepOrder: {
                        items: {
                            nullable: true,
                            type: 'string'
                        },
                        nullable: true,
                        type: 'array'
                    }
                },
                type: 'object'
            },
            nullable: true,
            type: 'array'
        },
        name: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const RedfishMetricReportSchema = {
    description: 'RedfishMetricReport schema',
    properties: {
        name: {
            type: 'string'
        },
        reports: {
            items: {
                nullable: true,
                properties: {
                    '@odata.context': {
                        type: 'string'
                    },
                    '@odata.etag': {
                        type: 'string'
                    },
                    '@odata.id': {
                        type: 'string'
                    },
                    '@odata.type': {
                        type: 'string'
                    },
                    Context: {
                        type: 'string'
                    },
                    Description: {
                        type: 'string'
                    },
                    Id: {
                        type: 'string'
                    },
                    MetricValues: {
                        items: {
                            properties: {
                                MetricID: {
                                    type: 'string'
                                },
                                MetricProperty: {
                                    type: 'string'
                                },
                                MetricValue: {
                                    type: 'string'
                                },
                                Oem: {},
                                Timestamp: {
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        type: 'array'
                    },
                    Name: {
                        type: 'string'
                    },
                    Oem: {},
                    Timestamp: {
                        type: 'string'
                    }
                },
                type: 'object'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const RedfishSystemSchema = {
    description: 'RedfishSystem schema',
    properties: {
        bios_version: {
            type: 'string'
        },
        boot_next: {
            type: 'string'
        },
        boot_order: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        health: {
            type: 'string'
        },
        host_name: {
            type: 'string'
        },
        manufacturer: {
            type: 'string'
        },
        model: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        oem_dell: {
            nullable: true,
            properties: {
                '@odata.context': {
                    type: 'string'
                },
                '@odata.id': {
                    type: 'string'
                },
                '@odata.type': {
                    type: 'string'
                },
                BIOSReleaseDate: {
                    type: 'string'
                },
                BaseBoardChassisSlot: {
                    type: 'string'
                },
                BatteryRollupStatus: {
                    type: 'string'
                },
                BladeGeometry: {
                    type: 'string'
                },
                CMCIP: {
                    type: 'string'
                },
                CPURollupStatus: {
                    type: 'string'
                },
                ChassisModel: {
                    type: 'string'
                },
                ChassisName: {
                    type: 'string'
                },
                ChassisServiceTag: {
                    type: 'string'
                },
                ChassisSystemHeightUnit: {
                    type: 'integer'
                },
                CurrentRollupStatus: {
                    type: 'string'
                },
                Description: {
                    type: 'string'
                },
                EstimatedExhaustTemperatureCelsius: {
                    type: 'integer'
                },
                EstimatedSystemAirflowCFM: {
                    type: 'integer'
                },
                ExpressServiceCode: {
                    type: 'string'
                },
                FanRollupStatus: {
                    type: 'string'
                },
                IDSDMRollupStatus: {
                    type: 'string'
                },
                Id: {
                    type: 'string'
                },
                IntrusionRollupStatus: {
                    type: 'string'
                },
                IsOEMBranded: {
                    type: 'string'
                },
                LastSystemInventoryTime: {
                    type: 'string'
                },
                LastUpdateTime: {
                    type: 'string'
                },
                LicensingRollupStatus: {
                    type: 'string'
                },
                ManagedSystemSize: {
                    type: 'string'
                },
                MaxCPUSockets: {
                    type: 'integer'
                },
                MaxDIMMSlots: {
                    type: 'integer'
                },
                MaxPCIeSlots: {
                    type: 'integer'
                },
                MemoryOperationMode: {
                    type: 'string'
                },
                Name: {
                    type: 'string'
                },
                NodeID: {
                    type: 'string'
                },
                PSRollupStatus: {
                    type: 'string'
                },
                PlatformGUID: {
                    type: 'string'
                },
                PopulatedDIMMSlots: {
                    type: 'integer'
                },
                PopulatedPCIeSlots: {
                    type: 'integer'
                },
                PowerCapEnabledState: {
                    type: 'string'
                },
                SDCardRollupStatus: {
                    type: 'string'
                },
                SELRollupStatus: {
                    type: 'string'
                },
                ServerAllocationWatts: {
                    type: 'integer'
                },
                StorageRollupStatus: {
                    type: 'string'
                },
                SysMemErrorMethodology: {
                    type: 'string'
                },
                SysMemFailOverState: {
                    type: 'string'
                },
                SysMemLocation: {
                    type: 'string'
                },
                SysMemPrimaryStatus: {
                    type: 'string'
                },
                SystemGeneration: {
                    type: 'string'
                },
                SystemID: {
                    type: 'integer'
                },
                SystemRevision: {
                    type: 'string'
                },
                TempRollupStatus: {
                    type: 'string'
                },
                TempStatisticsRollupStatus: {
                    type: 'string'
                },
                UUID: {
                    type: 'string'
                },
                VoltRollupStatus: {
                    type: 'string'
                },
                smbiosGUID: {
                    type: 'string'
                }
            },
            type: 'object'
        },
        power_status: {
            type: 'string'
        },
        processor_count: {
            type: 'integer'
        },
        serial_number: {
            type: 'string'
        },
        total_memory: {
            format: 'float',
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const UserSchema = {
    description: 'User schema',
    properties: {
        created_at: {
            format: 'date-time',
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        hash: {
            type: 'string'
        },
        id: {
            format: 'int64',
            type: 'integer'
        },
        modified_at: {
            format: 'date-time',
            type: 'string'
        },
        role: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const UserEnableRequestSchema = {
    description: 'UserEnableRequest schema',
    properties: {
        enabled: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const UserRoleRequestSchema = {
    description: 'UserRoleRequest schema',
    properties: {
        role: {
            description: 'type of model.Role, valid options: disabled, user, admin',
            example: 'admin',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const UserStoreRequestSchema = {
    description: 'UserStoreRequest schema',
    properties: {
        password: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const UserStoreResponseSchema = {
    description: 'UserStoreResponse schema',
    properties: {
        role: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const unknown_interfaceSchema = {
    description: 'unknown-interface schema'
} as const;