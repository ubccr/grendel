// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { UseMutationOptions, UseQueryOptions, useMutation, useQuery } from "@tanstack/react-query";
import { deleteV1AuthSignout, deleteV1BmcJobsJids, deleteV1BmcSel, deleteV1Images, deleteV1Nodes, deleteV1UsersUsernames, getV1Bmc, getV1BmcJobs, getV1BmcMetrics, getV1DbDump, getV1GrendelEvents, getV1Images, getV1ImagesFind, getV1Nodes, getV1NodesFind, getV1NodesTokenInterface, getV1Users, patchV1NodesImage, patchV1NodesProvision, patchV1NodesTagsAction, patchV1UsersUsernamesRole, postV1AuthSignin, postV1AuthSignup, postV1AuthToken, postV1BmcConfigureAuto, postV1BmcConfigureImport, postV1BmcPowerBmc, postV1BmcPowerOs, postV1DbRestore, postV1Images, postV1Nodes, postV1Users } from "../requests/services.gen";
import { DeleteV1AuthSignoutData, DeleteV1AuthSignoutError, DeleteV1BmcJobsJidsData, DeleteV1BmcJobsJidsError, DeleteV1BmcSelData, DeleteV1BmcSelError, DeleteV1ImagesData, DeleteV1ImagesError, DeleteV1NodesData, DeleteV1NodesError, DeleteV1UsersUsernamesData, DeleteV1UsersUsernamesError, GetV1BmcData, GetV1BmcError, GetV1BmcJobsData, GetV1BmcJobsError, GetV1BmcMetricsData, GetV1BmcMetricsError, GetV1DbDumpData, GetV1DbDumpError, GetV1GrendelEventsData, GetV1GrendelEventsError, GetV1ImagesData, GetV1ImagesError, GetV1ImagesFindData, GetV1ImagesFindError, GetV1NodesData, GetV1NodesError, GetV1NodesFindData, GetV1NodesFindError, GetV1NodesTokenInterfaceData, GetV1NodesTokenInterfaceError, GetV1UsersData, GetV1UsersError, PatchV1NodesImageData, PatchV1NodesImageError, PatchV1NodesProvisionData, PatchV1NodesProvisionError, PatchV1NodesTagsActionData, PatchV1NodesTagsActionError, PatchV1UsersUsernamesRoleData, PatchV1UsersUsernamesRoleError, PostV1AuthSigninData, PostV1AuthSigninError, PostV1AuthSignupData, PostV1AuthSignupError, PostV1AuthTokenData, PostV1AuthTokenError, PostV1BmcConfigureAutoData, PostV1BmcConfigureAutoError, PostV1BmcConfigureImportData, PostV1BmcConfigureImportError, PostV1BmcPowerBmcData, PostV1BmcPowerBmcError, PostV1BmcPowerOsData, PostV1BmcPowerOsError, PostV1DbRestoreData, PostV1DbRestoreError, PostV1ImagesData, PostV1ImagesError, PostV1NodesData, PostV1NodesError, PostV1UsersData, PostV1UsersError } from "../requests/types.gen";
import * as Common from "./common";
export const useGetV1Bmc = <TData = Common.GetV1BmcDefaultResponse, TError = GetV1BmcError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1BmcKeyFn(clientOptions, queryKey), queryFn: () => getV1Bmc({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1BmcJobs = <TData = Common.GetV1BmcJobsDefaultResponse, TError = GetV1BmcJobsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcJobsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1BmcJobsKeyFn(clientOptions, queryKey), queryFn: () => getV1BmcJobs({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1BmcMetrics = <TData = Common.GetV1BmcMetricsDefaultResponse, TError = GetV1BmcMetricsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcMetricsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1BmcMetricsKeyFn(clientOptions, queryKey), queryFn: () => getV1BmcMetrics({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1DbDump = <TData = Common.GetV1DbDumpDefaultResponse, TError = GetV1DbDumpError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1DbDumpData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1DbDumpKeyFn(clientOptions, queryKey), queryFn: () => getV1DbDump({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1GrendelEvents = <TData = Common.GetV1GrendelEventsDefaultResponse, TError = GetV1GrendelEventsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1GrendelEventsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1GrendelEventsKeyFn(clientOptions, queryKey), queryFn: () => getV1GrendelEvents({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1Images = <TData = Common.GetV1ImagesDefaultResponse, TError = GetV1ImagesError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1ImagesData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1ImagesKeyFn(clientOptions, queryKey), queryFn: () => getV1Images({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1ImagesFind = <TData = Common.GetV1ImagesFindDefaultResponse, TError = GetV1ImagesFindError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1ImagesFindData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1ImagesFindKeyFn(clientOptions, queryKey), queryFn: () => getV1ImagesFind({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1Nodes = <TData = Common.GetV1NodesDefaultResponse, TError = GetV1NodesError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1NodesKeyFn(clientOptions, queryKey), queryFn: () => getV1Nodes({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1NodesFind = <TData = Common.GetV1NodesFindDefaultResponse, TError = GetV1NodesFindError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesFindData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1NodesFindKeyFn(clientOptions, queryKey), queryFn: () => getV1NodesFind({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1NodesTokenInterface = <TData = Common.GetV1NodesTokenInterfaceDefaultResponse, TError = GetV1NodesTokenInterfaceError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesTokenInterfaceData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1NodesTokenInterfaceKeyFn(clientOptions, queryKey), queryFn: () => getV1NodesTokenInterface({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1Users = <TData = Common.GetV1UsersDefaultResponse, TError = GetV1UsersError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1UsersData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetV1UsersKeyFn(clientOptions, queryKey), queryFn: () => getV1Users({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const usePostV1AuthSignin = <TData = Common.PostV1AuthSigninMutationResult, TError = PostV1AuthSigninError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1AuthSigninData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1AuthSigninData, true>, TContext>({ mutationKey: Common.UsePostV1AuthSigninKeyFn(mutationKey), mutationFn: clientOptions => postV1AuthSignin(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1AuthSignup = <TData = Common.PostV1AuthSignupMutationResult, TError = PostV1AuthSignupError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1AuthSignupData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1AuthSignupData, true>, TContext>({ mutationKey: Common.UsePostV1AuthSignupKeyFn(mutationKey), mutationFn: clientOptions => postV1AuthSignup(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1AuthToken = <TData = Common.PostV1AuthTokenMutationResult, TError = PostV1AuthTokenError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1AuthTokenData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1AuthTokenData, true>, TContext>({ mutationKey: Common.UsePostV1AuthTokenKeyFn(mutationKey), mutationFn: clientOptions => postV1AuthToken(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1BmcConfigureAuto = <TData = Common.PostV1BmcConfigureAutoMutationResult, TError = PostV1BmcConfigureAutoError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1BmcConfigureAutoData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1BmcConfigureAutoData, true>, TContext>({ mutationKey: Common.UsePostV1BmcConfigureAutoKeyFn(mutationKey), mutationFn: clientOptions => postV1BmcConfigureAuto(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1BmcConfigureImport = <TData = Common.PostV1BmcConfigureImportMutationResult, TError = PostV1BmcConfigureImportError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1BmcConfigureImportData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1BmcConfigureImportData, true>, TContext>({ mutationKey: Common.UsePostV1BmcConfigureImportKeyFn(mutationKey), mutationFn: clientOptions => postV1BmcConfigureImport(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1BmcPowerBmc = <TData = Common.PostV1BmcPowerBmcMutationResult, TError = PostV1BmcPowerBmcError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1BmcPowerBmcData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1BmcPowerBmcData, true>, TContext>({ mutationKey: Common.UsePostV1BmcPowerBmcKeyFn(mutationKey), mutationFn: clientOptions => postV1BmcPowerBmc(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1BmcPowerOs = <TData = Common.PostV1BmcPowerOsMutationResult, TError = PostV1BmcPowerOsError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1BmcPowerOsData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1BmcPowerOsData, true>, TContext>({ mutationKey: Common.UsePostV1BmcPowerOsKeyFn(mutationKey), mutationFn: clientOptions => postV1BmcPowerOs(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1DbRestore = <TData = Common.PostV1DbRestoreMutationResult, TError = PostV1DbRestoreError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1DbRestoreData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1DbRestoreData, true>, TContext>({ mutationKey: Common.UsePostV1DbRestoreKeyFn(mutationKey), mutationFn: clientOptions => postV1DbRestore(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1Images = <TData = Common.PostV1ImagesMutationResult, TError = PostV1ImagesError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1ImagesData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1ImagesData, true>, TContext>({ mutationKey: Common.UsePostV1ImagesKeyFn(mutationKey), mutationFn: clientOptions => postV1Images(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1Nodes = <TData = Common.PostV1NodesMutationResult, TError = PostV1NodesError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1NodesData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1NodesData, true>, TContext>({ mutationKey: Common.UsePostV1NodesKeyFn(mutationKey), mutationFn: clientOptions => postV1Nodes(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostV1Users = <TData = Common.PostV1UsersMutationResult, TError = PostV1UsersError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostV1UsersData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostV1UsersData, true>, TContext>({ mutationKey: Common.UsePostV1UsersKeyFn(mutationKey), mutationFn: clientOptions => postV1Users(clientOptions) as unknown as Promise<TData>, ...options });
export const usePatchV1NodesImage = <TData = Common.PatchV1NodesImageMutationResult, TError = PatchV1NodesImageError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PatchV1NodesImageData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PatchV1NodesImageData, true>, TContext>({ mutationKey: Common.UsePatchV1NodesImageKeyFn(mutationKey), mutationFn: clientOptions => patchV1NodesImage(clientOptions) as unknown as Promise<TData>, ...options });
export const usePatchV1NodesProvision = <TData = Common.PatchV1NodesProvisionMutationResult, TError = PatchV1NodesProvisionError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PatchV1NodesProvisionData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PatchV1NodesProvisionData, true>, TContext>({ mutationKey: Common.UsePatchV1NodesProvisionKeyFn(mutationKey), mutationFn: clientOptions => patchV1NodesProvision(clientOptions) as unknown as Promise<TData>, ...options });
export const usePatchV1NodesTagsAction = <TData = Common.PatchV1NodesTagsActionMutationResult, TError = PatchV1NodesTagsActionError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PatchV1NodesTagsActionData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PatchV1NodesTagsActionData, true>, TContext>({ mutationKey: Common.UsePatchV1NodesTagsActionKeyFn(mutationKey), mutationFn: clientOptions => patchV1NodesTagsAction(clientOptions) as unknown as Promise<TData>, ...options });
export const usePatchV1UsersUsernamesRole = <TData = Common.PatchV1UsersUsernamesRoleMutationResult, TError = PatchV1UsersUsernamesRoleError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PatchV1UsersUsernamesRoleData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PatchV1UsersUsernamesRoleData, true>, TContext>({ mutationKey: Common.UsePatchV1UsersUsernamesRoleKeyFn(mutationKey), mutationFn: clientOptions => patchV1UsersUsernamesRole(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1AuthSignout = <TData = Common.DeleteV1AuthSignoutMutationResult, TError = DeleteV1AuthSignoutError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1AuthSignoutData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1AuthSignoutData, true>, TContext>({ mutationKey: Common.UseDeleteV1AuthSignoutKeyFn(mutationKey), mutationFn: clientOptions => deleteV1AuthSignout(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1BmcJobsJids = <TData = Common.DeleteV1BmcJobsJidsMutationResult, TError = DeleteV1BmcJobsJidsError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1BmcJobsJidsData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1BmcJobsJidsData, true>, TContext>({ mutationKey: Common.UseDeleteV1BmcJobsJidsKeyFn(mutationKey), mutationFn: clientOptions => deleteV1BmcJobsJids(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1BmcSel = <TData = Common.DeleteV1BmcSelMutationResult, TError = DeleteV1BmcSelError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1BmcSelData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1BmcSelData, true>, TContext>({ mutationKey: Common.UseDeleteV1BmcSelKeyFn(mutationKey), mutationFn: clientOptions => deleteV1BmcSel(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1Images = <TData = Common.DeleteV1ImagesMutationResult, TError = DeleteV1ImagesError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1ImagesData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1ImagesData, true>, TContext>({ mutationKey: Common.UseDeleteV1ImagesKeyFn(mutationKey), mutationFn: clientOptions => deleteV1Images(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1Nodes = <TData = Common.DeleteV1NodesMutationResult, TError = DeleteV1NodesError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1NodesData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1NodesData, true>, TContext>({ mutationKey: Common.UseDeleteV1NodesKeyFn(mutationKey), mutationFn: clientOptions => deleteV1Nodes(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeleteV1UsersUsernames = <TData = Common.DeleteV1UsersUsernamesMutationResult, TError = DeleteV1UsersUsernamesError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeleteV1UsersUsernamesData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeleteV1UsersUsernamesData, true>, TContext>({ mutationKey: Common.UseDeleteV1UsersUsernamesKeyFn(mutationKey), mutationFn: clientOptions => deleteV1UsersUsernames(clientOptions) as unknown as Promise<TData>, ...options });
