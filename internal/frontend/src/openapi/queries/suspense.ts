// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { getV1Bmc, getV1BmcJobs, getV1BmcMetrics, getV1DbDump, getV1GrendelEvents, getV1Images, getV1ImagesFind, getV1Nodes, getV1NodesFind, getV1NodesTokenInterface, getV1Users } from "../requests/services.gen";
import { GetV1BmcData, GetV1BmcError, GetV1BmcJobsData, GetV1BmcJobsError, GetV1BmcMetricsData, GetV1BmcMetricsError, GetV1DbDumpData, GetV1DbDumpError, GetV1GrendelEventsData, GetV1GrendelEventsError, GetV1ImagesData, GetV1ImagesError, GetV1ImagesFindData, GetV1ImagesFindError, GetV1NodesData, GetV1NodesError, GetV1NodesFindData, GetV1NodesFindError, GetV1NodesTokenInterfaceData, GetV1NodesTokenInterfaceError, GetV1UsersData, GetV1UsersError } from "../requests/types.gen";
import * as Common from "./common";
export const useGetV1BmcSuspense = <TData = Common.GetV1BmcDefaultResponse, TError = GetV1BmcError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1BmcKeyFn(clientOptions, queryKey), queryFn: () => getV1Bmc({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1BmcJobsSuspense = <TData = Common.GetV1BmcJobsDefaultResponse, TError = GetV1BmcJobsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcJobsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1BmcJobsKeyFn(clientOptions, queryKey), queryFn: () => getV1BmcJobs({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1BmcMetricsSuspense = <TData = Common.GetV1BmcMetricsDefaultResponse, TError = GetV1BmcMetricsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1BmcMetricsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1BmcMetricsKeyFn(clientOptions, queryKey), queryFn: () => getV1BmcMetrics({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1DbDumpSuspense = <TData = Common.GetV1DbDumpDefaultResponse, TError = GetV1DbDumpError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1DbDumpData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1DbDumpKeyFn(clientOptions, queryKey), queryFn: () => getV1DbDump({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1GrendelEventsSuspense = <TData = Common.GetV1GrendelEventsDefaultResponse, TError = GetV1GrendelEventsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1GrendelEventsData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1GrendelEventsKeyFn(clientOptions, queryKey), queryFn: () => getV1GrendelEvents({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1ImagesSuspense = <TData = Common.GetV1ImagesDefaultResponse, TError = GetV1ImagesError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1ImagesData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1ImagesKeyFn(clientOptions, queryKey), queryFn: () => getV1Images({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1ImagesFindSuspense = <TData = Common.GetV1ImagesFindDefaultResponse, TError = GetV1ImagesFindError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1ImagesFindData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1ImagesFindKeyFn(clientOptions, queryKey), queryFn: () => getV1ImagesFind({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1NodesSuspense = <TData = Common.GetV1NodesDefaultResponse, TError = GetV1NodesError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1NodesKeyFn(clientOptions, queryKey), queryFn: () => getV1Nodes({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1NodesFindSuspense = <TData = Common.GetV1NodesFindDefaultResponse, TError = GetV1NodesFindError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesFindData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1NodesFindKeyFn(clientOptions, queryKey), queryFn: () => getV1NodesFind({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1NodesTokenInterfaceSuspense = <TData = Common.GetV1NodesTokenInterfaceDefaultResponse, TError = GetV1NodesTokenInterfaceError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1NodesTokenInterfaceData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1NodesTokenInterfaceKeyFn(clientOptions, queryKey), queryFn: () => getV1NodesTokenInterface({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetV1UsersSuspense = <TData = Common.GetV1UsersDefaultResponse, TError = GetV1UsersError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<GetV1UsersData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseGetV1UsersKeyFn(clientOptions, queryKey), queryFn: () => getV1Users({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
