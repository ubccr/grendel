// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const userCount = `-- name: UserCount :one
/*
 * SPDX-FileCopyrightText: (C) 2019 Grendel Authors
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

select count(*) from user
`

func (q *Queries) UserCount(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, userCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userCreate = `-- name: UserCreate :one
insert into user (username, password_hash, role_id, enabled) 
select ?1, ?2, role.id, ?3
from role
where role.name = ?4
on conflict (username)
do update set password_hash = ?2
returning id, username, role_id, password_hash, enabled, created_at, updated_at
`

type UserCreateParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Enabled      bool   `json:"enabled"`
	Role         string `json:"role"`
}

func (q *Queries) UserCreate(ctx context.Context, db DBTX, arg UserCreateParams) (User, error) {
	row := db.QueryRowContext(ctx, userCreate,
		arg.Username,
		arg.PasswordHash,
		arg.Enabled,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RoleID,
		&i.PasswordHash,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :exec
delete from user where username = ?1
`

func (q *Queries) UserDelete(ctx context.Context, db DBTX, username string) error {
	_, err := db.ExecContext(ctx, userDelete, username)
	return err
}

const userFetch = `-- name: UserFetch :one
select username, id, password_hash, role, enabled, created_at, updated_at from user_view where username = ?1
`

func (q *Queries) UserFetch(ctx context.Context, db DBTX, username string) (UserView, error) {
	row := db.QueryRowContext(ctx, userFetch, username)
	var i UserView
	err := row.Scan(
		&i.Username,
		&i.ID,
		&i.PasswordHash,
		&i.Role,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userList = `-- name: UserList :many
select username, id, password_hash, role, enabled, created_at, updated_at from user_view
`

func (q *Queries) UserList(ctx context.Context, db DBTX) ([]UserView, error) {
	rows, err := db.QueryContext(ctx, userList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserView
	for rows.Next() {
		var i UserView
		if err := rows.Scan(
			&i.Username,
			&i.ID,
			&i.PasswordHash,
			&i.Role,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdateEnable = `-- name: UserUpdateEnable :exec
update user set enabled = ?1 where username = ?2
returning id, username, role_id, password_hash, enabled, created_at, updated_at
`

type UserUpdateEnableParams struct {
	Enabled  bool   `json:"enabled"`
	Username string `json:"username"`
}

func (q *Queries) UserUpdateEnable(ctx context.Context, db DBTX, arg UserUpdateEnableParams) error {
	_, err := db.ExecContext(ctx, userUpdateEnable, arg.Enabled, arg.Username)
	return err
}

const userUpdateRole = `-- name: UserUpdateRole :exec
update user set role_id = (
  select role.id
  from role
  where role.name = ?1
)
where user.username = ?2
returning id, username, role_id, password_hash, enabled, created_at, updated_at
`

type UserUpdateRoleParams struct {
	Role     string `json:"role"`
	Username string `json:"username"`
}

func (q *Queries) UserUpdateRole(ctx context.Context, db DBTX, arg UserUpdateRoleParams) error {
	_, err := db.ExecContext(ctx, userUpdateRole, arg.Role, arg.Username)
	return err
}
