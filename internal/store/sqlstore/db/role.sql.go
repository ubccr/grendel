// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package db

import (
	"context"
	"strings"

	"github.com/ubccr/grendel/pkg/model"
)

const roleAdd = `-- name: RoleAdd :one
insert into role (name)
values (?1)
returning id
`

func (q *Queries) RoleAdd(ctx context.Context, db DBTX, name string) (int64, error) {
	row := db.QueryRowContext(ctx, roleAdd, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const roleDelete = `-- name: RoleDelete :exec
delete from role where name = ?1
`

func (q *Queries) RoleDelete(ctx context.Context, db DBTX, name string) error {
	_, err := db.ExecContext(ctx, roleDelete, name)
	return err
}

const roleFetchByMethodAndPath = `-- name: RoleFetchByMethodAndPath :many
/*
 * SPDX-FileCopyrightText: (C) 2019 Grendel Authors
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

select role.name
from permission
inner join role on role_permission.role_id = role.id
inner join role_permission on role_permission.permission_id = permission.id
where permission.method = ?1 and ?2 like permission.path
`

type RoleFetchByMethodAndPathParams struct {
	Method string `json:"method"`
	Path   string `json:"path"`
}

func (q *Queries) RoleFetchByMethodAndPath(ctx context.Context, db DBTX, arg RoleFetchByMethodAndPathParams) ([]string, error) {
	rows, err := db.QueryContext(ctx, roleFetchByMethodAndPath, arg.Method, arg.Path)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const roleFetchId = `-- name: RoleFetchId :one
select id from role where name = ?1
`

func (q *Queries) RoleFetchId(ctx context.Context, db DBTX, name string) (int64, error) {
	row := db.QueryRowContext(ctx, roleFetchId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const roleFetchPermissionId = `-- name: RoleFetchPermissionId :one
select id from permission where method = ?1 and path = ?2
`

type RoleFetchPermissionIdParams struct {
	Method string `json:"method"`
	Path   string `json:"path"`
}

func (q *Queries) RoleFetchPermissionId(ctx context.Context, db DBTX, arg RoleFetchPermissionIdParams) (int64, error) {
	row := db.QueryRowContext(ctx, roleFetchPermissionId, arg.Method, arg.Path)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const roleFetchPermissions = `-- name: RoleFetchPermissions :many
select method, path from permission
`

type RoleFetchPermissionsRow struct {
	Method string `json:"method"`
	Path   string `json:"path"`
}

func (q *Queries) RoleFetchPermissions(ctx context.Context, db DBTX) ([]RoleFetchPermissionsRow, error) {
	rows, err := db.QueryContext(ctx, roleFetchPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleFetchPermissionsRow
	for rows.Next() {
		var i RoleFetchPermissionsRow
		if err := rows.Scan(&i.Method, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const roleFetchPermissionsByRole = `-- name: RoleFetchPermissionsByRole :many
select permission_id from role_permission where role_id = ?1
`

func (q *Queries) RoleFetchPermissionsByRole(ctx context.Context, db DBTX, roleID int64) ([]int64, error) {
	rows, err := db.QueryContext(ctx, roleFetchPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var permission_id int64
		if err := rows.Scan(&permission_id); err != nil {
			return nil, err
		}
		items = append(items, permission_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const roleFetchView = `-- name: RoleFetchView :many
select permission_json from role_view
`

func (q *Queries) RoleFetchView(ctx context.Context, db DBTX) ([]model.RoleView, error) {
	rows, err := db.QueryContext(ctx, roleFetchView)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []model.RoleView
	for rows.Next() {
		var permission_json model.RoleView
		if err := rows.Scan(&permission_json); err != nil {
			return nil, err
		}
		items = append(items, permission_json)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const roleFetchViewByName = `-- name: RoleFetchViewByName :one
select permission_json from role_view where name = ?1
`

func (q *Queries) RoleFetchViewByName(ctx context.Context, db DBTX, name string) (model.RoleView, error) {
	row := db.QueryRowContext(ctx, roleFetchViewByName, name)
	var permission_json model.RoleView
	err := row.Scan(&permission_json)
	return permission_json, err
}

const roleUpsertDelete = `-- name: RoleUpsertDelete :exec
delete from role_permission where role_id = ?1 and permission_id not in (/*SLICE:ids*/?)
`

type RoleUpsertDeleteParams struct {
	RoleID int64   `json:"role_id"`
	Ids    []int64 `json:"ids"`
}

func (q *Queries) RoleUpsertDelete(ctx context.Context, db DBTX, arg RoleUpsertDeleteParams) error {
	query := roleUpsertDelete
	var queryParams []interface{}
	queryParams = append(queryParams, arg.RoleID)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := db.ExecContext(ctx, query, queryParams...)
	return err
}

const roleUpsertPermission = `-- name: RoleUpsertPermission :exec
insert into role_permission (role_id, permission_id)
values (?1, ?2)
on conflict do nothing
`

type RoleUpsertPermissionParams struct {
	RoleID       int64 `json:"role_id"`
	PermissionID int64 `json:"permission_id"`
}

func (q *Queries) RoleUpsertPermission(ctx context.Context, db DBTX, arg RoleUpsertPermissionParams) error {
	_, err := db.ExecContext(ctx, roleUpsertPermission, arg.RoleID, arg.PermissionID)
	return err
}
