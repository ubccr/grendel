// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: config.sql

package db

import (
	"context"

	null "github.com/guregu/null/v5"
)

const configList = `-- name: ConfigList :many
/*
 * SPDX-FileCopyrightText: (C) 2019 Grendel Authors
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

select "key", value from config
`

func (q *Queries) ConfigList(ctx context.Context, db DBTX) ([]Config, error) {
	rows, err := db.QueryContext(ctx, configList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const configUpsert = `-- name: ConfigUpsert :exec
insert into config (key, value)
values (?1, ?2)
on conflict (key)
do update set value = ?2
`

type ConfigUpsertParams struct {
	Key   string      `json:"key"`
	Value null.String `json:"value"`
}

func (q *Queries) ConfigUpsert(ctx context.Context, db DBTX, arg ConfigUpsertParams) error {
	_, err := db.ExecContext(ctx, configUpsert, arg.Key, arg.Value)
	return err
}
