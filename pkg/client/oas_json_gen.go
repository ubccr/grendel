// Code generated by ogen, DO NOT EDIT.

package client

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AuthRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Password.Set {
			e.FieldStart("password")
			s.Password.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthRequest = [2]string{
	0: "password",
	1: "username",
}

// Decode decodes AuthRequest from json.
func (s *AuthRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "password":
			if err := func() error {
				s.Password.Reset()
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthResponse = [4]string{
	0: "expire",
	1: "role",
	2: "token",
	3: "username",
}

// Decode decodes AuthResponse from json.
func (s *AuthResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthSignupRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthSignupRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("password")
		e.Str(s.Password)
	}
	{
		e.FieldStart("username")
		e.Str(s.Username)
	}
}

var jsonFieldsNameOfAuthSignupRequest = [2]string{
	0: "password",
	1: "username",
}

// Decode decodes AuthSignupRequest from json.
func (s *AuthSignupRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthSignupRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "password":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Password = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "username":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Username = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthSignupRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthSignupRequest) {
					name = jsonFieldsNameOfAuthSignupRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthSignupRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthSignupRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthTokenReponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthTokenReponse) encodeFields(e *jx.Encoder) {
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthTokenReponse = [1]string{
	0: "token",
}

// Decode decodes AuthTokenReponse from json.
func (s *AuthTokenReponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthTokenReponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthTokenReponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthTokenReponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthTokenReponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthTokenRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthTokenRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthTokenRequest = [3]string{
	0: "expire",
	1: "role",
	2: "username",
}

// Decode decodes AuthTokenRequest from json.
func (s *AuthTokenRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthTokenRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthTokenRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthTokenRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthTokenRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BmcImportConfigurationRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BmcImportConfigurationRequest) encodeFields(e *jx.Encoder) {
	{
		if s.File.Set {
			e.FieldStart("file")
			s.File.Encode(e)
		}
	}
	{
		if s.ShutdownType.Set {
			e.FieldStart("shutdown_type")
			s.ShutdownType.Encode(e)
		}
	}
}

var jsonFieldsNameOfBmcImportConfigurationRequest = [2]string{
	0: "file",
	1: "shutdown_type",
}

// Decode decodes BmcImportConfigurationRequest from json.
func (s *BmcImportConfigurationRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BmcImportConfigurationRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file":
			if err := func() error {
				s.File.Reset()
				if err := s.File.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file\"")
			}
		case "shutdown_type":
			if err := func() error {
				s.ShutdownType.Reset()
				if err := s.ShutdownType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shutdown_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BmcImportConfigurationRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BmcImportConfigurationRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BmcImportConfigurationRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BmcOsPowerBody) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BmcOsPowerBody) encodeFields(e *jx.Encoder) {
	{
		if s.BootOption.Set {
			e.FieldStart("boot_option")
			s.BootOption.Encode(e)
		}
	}
	{
		if s.PowerOption.Set {
			e.FieldStart("power_option")
			s.PowerOption.Encode(e)
		}
	}
}

var jsonFieldsNameOfBmcOsPowerBody = [2]string{
	0: "boot_option",
	1: "power_option",
}

// Decode decodes BmcOsPowerBody from json.
func (s *BmcOsPowerBody) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BmcOsPowerBody to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "boot_option":
			if err := func() error {
				s.BootOption.Reset()
				if err := s.BootOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_option\"")
			}
		case "power_option":
			if err := func() error {
				s.PowerOption.Reset()
				if err := s.PowerOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"power_option\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BmcOsPowerBody")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BmcOsPowerBody) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BmcOsPowerBody) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BootImage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BootImage) encodeFields(e *jx.Encoder) {
	{
		if s.Butane.Set {
			e.FieldStart("butane")
			s.Butane.Encode(e)
		}
	}
	{
		if s.Cmdline.Set {
			e.FieldStart("cmdline")
			s.Cmdline.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Initrd != nil {
			e.FieldStart("initrd")
			e.ArrStart()
			for _, elem := range s.Initrd {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		e.FieldStart("kernel")
		e.Str(s.Kernel)
	}
	{
		if s.Liveimg.Set {
			e.FieldStart("liveimg")
			s.Liveimg.Encode(e)
		}
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.ProvisionTemplate.Set {
			e.FieldStart("provision_template")
			s.ProvisionTemplate.Encode(e)
		}
	}
	{
		if s.ProvisionTemplates.Set {
			e.FieldStart("provision_templates")
			s.ProvisionTemplates.Encode(e)
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		if s.UserData.Set {
			e.FieldStart("user_data")
			s.UserData.Encode(e)
		}
	}
	{
		if s.Verify.Set {
			e.FieldStart("verify")
			s.Verify.Encode(e)
		}
	}
}

var jsonFieldsNameOfBootImage = [12]string{
	0:  "butane",
	1:  "cmdline",
	2:  "id",
	3:  "initrd",
	4:  "kernel",
	5:  "liveimg",
	6:  "name",
	7:  "provision_template",
	8:  "provision_templates",
	9:  "uid",
	10: "user_data",
	11: "verify",
}

// Decode decodes BootImage from json.
func (s *BootImage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BootImage to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "butane":
			if err := func() error {
				s.Butane.Reset()
				if err := s.Butane.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"butane\"")
			}
		case "cmdline":
			if err := func() error {
				s.Cmdline.Reset()
				if err := s.Cmdline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmdline\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "initrd":
			if err := func() error {
				s.Initrd = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Initrd = append(s.Initrd, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initrd\"")
			}
		case "kernel":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Kernel = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"kernel\"")
			}
		case "liveimg":
			if err := func() error {
				s.Liveimg.Reset()
				if err := s.Liveimg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"liveimg\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision_template":
			if err := func() error {
				s.ProvisionTemplate.Reset()
				if err := s.ProvisionTemplate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template\"")
			}
		case "provision_templates":
			if err := func() error {
				s.ProvisionTemplates.Reset()
				if err := s.ProvisionTemplates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_templates\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "user_data":
			if err := func() error {
				s.UserData.Reset()
				if err := s.UserData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_data\"")
			}
		case "verify":
			if err := func() error {
				s.Verify.Reset()
				if err := s.Verify.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verify\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BootImage")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b01010000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBootImage) {
					name = jsonFieldsNameOfBootImage[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BootImage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BootImage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BootImageAddRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BootImageAddRequest) encodeFields(e *jx.Encoder) {
	{
		if s.BootImages != nil {
			e.FieldStart("boot_images")
			e.ArrStart()
			for _, elem := range s.BootImages {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBootImageAddRequest = [1]string{
	0: "boot_images",
}

// Decode decodes BootImageAddRequest from json.
func (s *BootImageAddRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BootImageAddRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "boot_images":
			if err := func() error {
				s.BootImages = make([]NilBootImageAddRequestBootImagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilBootImageAddRequestBootImagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BootImages = append(s.BootImages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_images\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BootImageAddRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BootImageAddRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BootImageAddRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BootImageAddRequestBootImagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BootImageAddRequestBootImagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Butane.Set {
			e.FieldStart("butane")
			s.Butane.Encode(e)
		}
	}
	{
		if s.Cmdline.Set {
			e.FieldStart("cmdline")
			s.Cmdline.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Initrd != nil {
			e.FieldStart("initrd")
			e.ArrStart()
			for _, elem := range s.Initrd {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Kernel.Set {
			e.FieldStart("kernel")
			s.Kernel.Encode(e)
		}
	}
	{
		if s.Liveimg.Set {
			e.FieldStart("liveimg")
			s.Liveimg.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ProvisionTemplate.Set {
			e.FieldStart("provision_template")
			s.ProvisionTemplate.Encode(e)
		}
	}
	{
		if s.ProvisionTemplates.Set {
			e.FieldStart("provision_templates")
			s.ProvisionTemplates.Encode(e)
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		if s.UserData.Set {
			e.FieldStart("user_data")
			s.UserData.Encode(e)
		}
	}
	{
		if s.Verify.Set {
			e.FieldStart("verify")
			s.Verify.Encode(e)
		}
	}
}

var jsonFieldsNameOfBootImageAddRequestBootImagesItem = [12]string{
	0:  "butane",
	1:  "cmdline",
	2:  "id",
	3:  "initrd",
	4:  "kernel",
	5:  "liveimg",
	6:  "name",
	7:  "provision_template",
	8:  "provision_templates",
	9:  "uid",
	10: "user_data",
	11: "verify",
}

// Decode decodes BootImageAddRequestBootImagesItem from json.
func (s *BootImageAddRequestBootImagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BootImageAddRequestBootImagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "butane":
			if err := func() error {
				s.Butane.Reset()
				if err := s.Butane.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"butane\"")
			}
		case "cmdline":
			if err := func() error {
				s.Cmdline.Reset()
				if err := s.Cmdline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmdline\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "initrd":
			if err := func() error {
				s.Initrd = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Initrd = append(s.Initrd, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initrd\"")
			}
		case "kernel":
			if err := func() error {
				s.Kernel.Reset()
				if err := s.Kernel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"kernel\"")
			}
		case "liveimg":
			if err := func() error {
				s.Liveimg.Reset()
				if err := s.Liveimg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"liveimg\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision_template":
			if err := func() error {
				s.ProvisionTemplate.Reset()
				if err := s.ProvisionTemplate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template\"")
			}
		case "provision_templates":
			if err := func() error {
				s.ProvisionTemplates.Reset()
				if err := s.ProvisionTemplates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_templates\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "user_data":
			if err := func() error {
				s.UserData.Reset()
				if err := s.UserData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_data\"")
			}
		case "verify":
			if err := func() error {
				s.Verify.Reset()
				if err := s.Verify.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verify\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BootImageAddRequestBootImagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BootImageAddRequestBootImagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BootImageAddRequestBootImagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s BootImageAddRequestBootImagesItemProvisionTemplates) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s BootImageAddRequestBootImagesItemProvisionTemplates) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes BootImageAddRequestBootImagesItemProvisionTemplates from json.
func (s *BootImageAddRequestBootImagesItemProvisionTemplates) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BootImageAddRequestBootImagesItemProvisionTemplates to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem NilString
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BootImageAddRequestBootImagesItemProvisionTemplates")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BootImageAddRequestBootImagesItemProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BootImageAddRequestBootImagesItemProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s BootImageProvisionTemplates) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s BootImageProvisionTemplates) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes BootImageProvisionTemplates from json.
func (s *BootImageProvisionTemplates) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BootImageProvisionTemplates to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem NilString
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BootImageProvisionTemplates")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BootImageProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BootImageProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDump) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDump) encodeFields(e *jx.Encoder) {
	{
		if s.Hosts != nil {
			e.FieldStart("Hosts")
			e.ArrStart()
			for _, elem := range s.Hosts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Images != nil {
			e.FieldStart("Images")
			e.ArrStart()
			for _, elem := range s.Images {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("Users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfDataDump = [3]string{
	0: "Hosts",
	1: "Images",
	2: "Users",
}

// Decode decodes DataDump from json.
func (s *DataDump) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDump to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Hosts":
			if err := func() error {
				s.Hosts = make([]NilDataDumpHostsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilDataDumpHostsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Hosts = append(s.Hosts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Hosts\"")
			}
		case "Images":
			if err := func() error {
				s.Images = make([]NilDataDumpImagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilDataDumpImagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Images = append(s.Images, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Images\"")
			}
		case "Users":
			if err := func() error {
				s.Users = make([]DataDumpUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DataDumpUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDump")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDump) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDump) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDumpHostsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDumpHostsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bonds != nil {
			e.FieldStart("bonds")
			e.ArrStart()
			for _, elem := range s.Bonds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BootImage.Set {
			e.FieldStart("boot_image")
			s.BootImage.Encode(e)
		}
	}
	{
		if s.Firmware.Set {
			e.FieldStart("firmware")
			s.Firmware.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Interfaces != nil {
			e.FieldStart("interfaces")
			e.ArrStart()
			for _, elem := range s.Interfaces {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Provision.Set {
			e.FieldStart("provision")
			s.Provision.Encode(e)
		}
	}
	{
		if s.Tags != nil {
			e.FieldStart("tags")
			e.ArrStart()
			for _, elem := range s.Tags {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataDumpHostsItem = [9]string{
	0: "bonds",
	1: "boot_image",
	2: "firmware",
	3: "id",
	4: "interfaces",
	5: "name",
	6: "provision",
	7: "tags",
	8: "uid",
}

// Decode decodes DataDumpHostsItem from json.
func (s *DataDumpHostsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpHostsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bonds":
			if err := func() error {
				s.Bonds = make([]NilDataDumpHostsItemBondsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilDataDumpHostsItemBondsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Bonds = append(s.Bonds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bonds\"")
			}
		case "boot_image":
			if err := func() error {
				s.BootImage.Reset()
				if err := s.BootImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_image\"")
			}
		case "firmware":
			if err := func() error {
				s.Firmware.Reset()
				if err := s.Firmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firmware\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "interfaces":
			if err := func() error {
				s.Interfaces = make([]NilDataDumpHostsItemInterfacesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilDataDumpHostsItemInterfacesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Interfaces = append(s.Interfaces, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interfaces\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision":
			if err := func() error {
				s.Provision.Reset()
				if err := s.Provision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision\"")
			}
		case "tags":
			if err := func() error {
				s.Tags = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Tags = append(s.Tags, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tags\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpHostsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDumpHostsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpHostsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDumpHostsItemBondsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDumpHostsItemBondsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Peers != nil {
			e.FieldStart("peers")
			e.ArrStart()
			for _, elem := range s.Peers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataDumpHostsItemBondsItem = [9]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "peers",
	8: "vlan",
}

// Decode decodes DataDumpHostsItemBondsItem from json.
func (s *DataDumpHostsItemBondsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpHostsItemBondsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "peers":
			if err := func() error {
				s.Peers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Peers = append(s.Peers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peers\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpHostsItemBondsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDumpHostsItemBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpHostsItemBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDumpHostsItemInterfacesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDumpHostsItemInterfacesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataDumpHostsItemInterfacesItem = [8]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "vlan",
}

// Decode decodes DataDumpHostsItemInterfacesItem from json.
func (s *DataDumpHostsItemInterfacesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpHostsItemInterfacesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpHostsItemInterfacesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDumpHostsItemInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpHostsItemInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDumpImagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDumpImagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Butane.Set {
			e.FieldStart("butane")
			s.Butane.Encode(e)
		}
	}
	{
		if s.Cmdline.Set {
			e.FieldStart("cmdline")
			s.Cmdline.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Initrd != nil {
			e.FieldStart("initrd")
			e.ArrStart()
			for _, elem := range s.Initrd {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Kernel.Set {
			e.FieldStart("kernel")
			s.Kernel.Encode(e)
		}
	}
	{
		if s.Liveimg.Set {
			e.FieldStart("liveimg")
			s.Liveimg.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ProvisionTemplate.Set {
			e.FieldStart("provision_template")
			s.ProvisionTemplate.Encode(e)
		}
	}
	{
		if s.ProvisionTemplates.Set {
			e.FieldStart("provision_templates")
			s.ProvisionTemplates.Encode(e)
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		if s.UserData.Set {
			e.FieldStart("user_data")
			s.UserData.Encode(e)
		}
	}
	{
		if s.Verify.Set {
			e.FieldStart("verify")
			s.Verify.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataDumpImagesItem = [12]string{
	0:  "butane",
	1:  "cmdline",
	2:  "id",
	3:  "initrd",
	4:  "kernel",
	5:  "liveimg",
	6:  "name",
	7:  "provision_template",
	8:  "provision_templates",
	9:  "uid",
	10: "user_data",
	11: "verify",
}

// Decode decodes DataDumpImagesItem from json.
func (s *DataDumpImagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpImagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "butane":
			if err := func() error {
				s.Butane.Reset()
				if err := s.Butane.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"butane\"")
			}
		case "cmdline":
			if err := func() error {
				s.Cmdline.Reset()
				if err := s.Cmdline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmdline\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "initrd":
			if err := func() error {
				s.Initrd = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Initrd = append(s.Initrd, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initrd\"")
			}
		case "kernel":
			if err := func() error {
				s.Kernel.Reset()
				if err := s.Kernel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"kernel\"")
			}
		case "liveimg":
			if err := func() error {
				s.Liveimg.Reset()
				if err := s.Liveimg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"liveimg\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision_template":
			if err := func() error {
				s.ProvisionTemplate.Reset()
				if err := s.ProvisionTemplate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template\"")
			}
		case "provision_templates":
			if err := func() error {
				s.ProvisionTemplates.Reset()
				if err := s.ProvisionTemplates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_templates\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "user_data":
			if err := func() error {
				s.UserData.Reset()
				if err := s.UserData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_data\"")
			}
		case "verify":
			if err := func() error {
				s.Verify.Reset()
				if err := s.Verify.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verify\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpImagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDumpImagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpImagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s DataDumpImagesItemProvisionTemplates) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s DataDumpImagesItemProvisionTemplates) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes DataDumpImagesItemProvisionTemplates from json.
func (s *DataDumpImagesItemProvisionTemplates) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpImagesItemProvisionTemplates to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem NilString
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpImagesItemProvisionTemplates")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DataDumpImagesItemProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpImagesItemProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataDumpUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataDumpUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Hash.Set {
			e.FieldStart("hash")
			s.Hash.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ModifiedAt.Set {
			e.FieldStart("modified_at")
			s.ModifiedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataDumpUsersItem = [6]string{
	0: "created_at",
	1: "hash",
	2: "id",
	3: "modified_at",
	4: "role",
	5: "username",
}

// Decode decodes DataDumpUsersItem from json.
func (s *DataDumpUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDumpUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "hash":
			if err := func() error {
				s.Hash.Reset()
				if err := s.Hash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hash\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "modified_at":
			if err := func() error {
				s.ModifiedAt.Reset()
				if err := s.ModifiedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified_at\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataDumpUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataDumpUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataDumpUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Event) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Event) encodeFields(e *jx.Encoder) {
	{
		if s.JobMessages != nil {
			e.FieldStart("JobMessages")
			e.ArrStart()
			for _, elem := range s.JobMessages {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("Message")
			s.Message.Encode(e)
		}
	}
	{
		if s.Severity.Set {
			e.FieldStart("Severity")
			s.Severity.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("Time")
			s.Time.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.User.Set {
			e.FieldStart("User")
			s.User.Encode(e)
		}
	}
}

var jsonFieldsNameOfEvent = [5]string{
	0: "JobMessages",
	1: "Message",
	2: "Severity",
	3: "Time",
	4: "User",
}

// Decode decodes Event from json.
func (s *Event) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Event to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "JobMessages":
			if err := func() error {
				s.JobMessages = make([]EventJobMessagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem EventJobMessagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.JobMessages = append(s.JobMessages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JobMessages\"")
			}
		case "Message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Message\"")
			}
		case "Severity":
			if err := func() error {
				s.Severity.Reset()
				if err := s.Severity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Severity\"")
			}
		case "Time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Time\"")
			}
		case "User":
			if err := func() error {
				s.User.Reset()
				if err := s.User.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"User\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Event")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Event) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Event) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *EventJobMessagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *EventJobMessagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Host.Set {
			e.FieldStart("host")
			s.Host.Encode(e)
		}
	}
	{
		if s.Msg.Set {
			e.FieldStart("msg")
			s.Msg.Encode(e)
		}
	}
	{
		if s.RedfishError.Set {
			e.FieldStart("redfish_error")
			s.RedfishError.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventJobMessagesItem = [4]string{
	0: "host",
	1: "msg",
	2: "redfish_error",
	3: "status",
}

// Decode decodes EventJobMessagesItem from json.
func (s *EventJobMessagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventJobMessagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host\"")
			}
		case "msg":
			if err := func() error {
				s.Msg.Reset()
				if err := s.Msg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msg\"")
			}
		case "redfish_error":
			if err := func() error {
				s.RedfishError.Reset()
				if err := s.RedfishError.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redfish_error\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventJobMessagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *EventJobMessagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventJobMessagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *EventJobMessagesItemRedfishError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *EventJobMessagesItemRedfishError) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventJobMessagesItemRedfishError = [2]string{
	0: "code",
	1: "error",
}

// Decode decodes EventJobMessagesItemRedfishError from json.
func (s *EventJobMessagesItemRedfishError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventJobMessagesItemRedfishError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventJobMessagesItemRedfishError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *EventJobMessagesItemRedfishError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventJobMessagesItemRedfishError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *EventJobMessagesItemRedfishErrorError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *EventJobMessagesItemRedfishErrorError) encodeFields(e *jx.Encoder) {
	{
		if s.MessageDotExtendedInfo != nil {
			e.FieldStart("@Message.ExtendedInfo")
			e.ArrStart()
			for _, elem := range s.MessageDotExtendedInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventJobMessagesItemRedfishErrorError = [3]string{
	0: "@Message.ExtendedInfo",
	1: "code",
	2: "message",
}

// Decode decodes EventJobMessagesItemRedfishErrorError from json.
func (s *EventJobMessagesItemRedfishErrorError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventJobMessagesItemRedfishErrorError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "@Message.ExtendedInfo":
			if err := func() error {
				s.MessageDotExtendedInfo = make([]EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MessageDotExtendedInfo = append(s.MessageDotExtendedInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@Message.ExtendedInfo\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventJobMessagesItemRedfishErrorError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *EventJobMessagesItemRedfishErrorError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventJobMessagesItemRedfishErrorError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("Message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageArgsDotOdataDotCount.Set {
			e.FieldStart("MessageArgs.@odata.count")
			s.MessageArgsDotOdataDotCount.Encode(e)
		}
	}
	{
		if s.MessageId.Set {
			e.FieldStart("MessageId")
			s.MessageId.Encode(e)
		}
	}
	{
		if s.RelatedPropertiesDotOdataDotCount.Set {
			e.FieldStart("RelatedProperties.@odata.count")
			s.RelatedPropertiesDotOdataDotCount.Encode(e)
		}
	}
	{
		if s.Resolution.Set {
			e.FieldStart("Resolution")
			s.Resolution.Encode(e)
		}
	}
	{
		if s.Severity.Set {
			e.FieldStart("Severity")
			s.Severity.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem = [6]string{
	0: "Message",
	1: "MessageArgs.@odata.count",
	2: "MessageId",
	3: "RelatedProperties.@odata.count",
	4: "Resolution",
	5: "Severity",
}

// Decode decodes EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem from json.
func (s *EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Message\"")
			}
		case "MessageArgs.@odata.count":
			if err := func() error {
				s.MessageArgsDotOdataDotCount.Reset()
				if err := s.MessageArgsDotOdataDotCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageArgs.@odata.count\"")
			}
		case "MessageId":
			if err := func() error {
				s.MessageId.Reset()
				if err := s.MessageId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageId\"")
			}
		case "RelatedProperties.@odata.count":
			if err := func() error {
				s.RelatedPropertiesDotOdataDotCount.Reset()
				if err := s.RelatedPropertiesDotOdataDotCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RelatedProperties.@odata.count\"")
			}
		case "Resolution":
			if err := func() error {
				s.Resolution.Reset()
				if err := s.Resolution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Resolution\"")
			}
		case "Severity":
			if err := func() error {
				s.Severity.Reset()
				if err := s.Severity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Severity\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventJobMessagesItemRedfishErrorErrorMessageDotExtendedInfoItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenericResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenericResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Changed.Set {
			e.FieldStart("changed")
			s.Changed.Encode(e)
		}
	}
	{
		if s.Detail.Set {
			e.FieldStart("detail")
			s.Detail.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
}

var jsonFieldsNameOfGenericResponse = [3]string{
	0: "changed",
	1: "detail",
	2: "title",
}

// Decode decodes GenericResponse from json.
func (s *GenericResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenericResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changed":
			if err := func() error {
				s.Changed.Reset()
				if err := s.Changed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changed\"")
			}
		case "detail":
			if err := func() error {
				s.Detail.Reset()
				if err := s.Detail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detail\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenericResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenericResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenericResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HTTPError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HTTPError) encodeFields(e *jx.Encoder) {
	{
		if s.Detail.Set {
			e.FieldStart("detail")
			s.Detail.Encode(e)
		}
	}
	{
		if s.Errors.Set {
			e.FieldStart("errors")
			s.Errors.Encode(e)
		}
	}
	{
		if s.Instance.Set {
			e.FieldStart("instance")
			s.Instance.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfHTTPError = [6]string{
	0: "detail",
	1: "errors",
	2: "instance",
	3: "status",
	4: "title",
	5: "type",
}

// Decode decodes HTTPError from json.
func (s *HTTPError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HTTPError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "detail":
			if err := func() error {
				s.Detail.Reset()
				if err := s.Detail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detail\"")
			}
		case "errors":
			if err := func() error {
				s.Errors.Reset()
				if err := s.Errors.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		case "instance":
			if err := func() error {
				s.Instance.Reset()
				if err := s.Instance.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instance\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HTTPError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HTTPError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HTTPError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HTTPErrorErrorsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HTTPErrorErrorsItem) encodeFields(e *jx.Encoder) {
	{
		if s.More.Set {
			e.FieldStart("more")
			s.More.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Reason.Set {
			e.FieldStart("reason")
			s.Reason.Encode(e)
		}
	}
}

var jsonFieldsNameOfHTTPErrorErrorsItem = [3]string{
	0: "more",
	1: "name",
	2: "reason",
}

// Decode decodes HTTPErrorErrorsItem from json.
func (s *HTTPErrorErrorsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HTTPErrorErrorsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "more":
			if err := func() error {
				s.More.Reset()
				if err := s.More.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"more\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HTTPErrorErrorsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HTTPErrorErrorsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HTTPErrorErrorsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s HTTPErrorErrorsItemMore) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s HTTPErrorErrorsItemMore) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes HTTPErrorErrorsItemMore from json.
func (s *HTTPErrorErrorsItemMore) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HTTPErrorErrorsItemMore to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HTTPErrorErrorsItemMore")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HTTPErrorErrorsItemMore) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HTTPErrorErrorsItemMore) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Host) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Host) encodeFields(e *jx.Encoder) {
	{
		if s.Bonds != nil {
			e.FieldStart("bonds")
			e.ArrStart()
			for _, elem := range s.Bonds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BootImage.Set {
			e.FieldStart("boot_image")
			s.BootImage.Encode(e)
		}
	}
	{
		if s.Firmware.Set {
			e.FieldStart("firmware")
			s.Firmware.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Interfaces != nil {
			e.FieldStart("interfaces")
			e.ArrStart()
			for _, elem := range s.Interfaces {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Provision.Set {
			e.FieldStart("provision")
			s.Provision.Encode(e)
		}
	}
	{
		if s.Tags != nil {
			e.FieldStart("tags")
			e.ArrStart()
			for _, elem := range s.Tags {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
}

var jsonFieldsNameOfHost = [9]string{
	0: "bonds",
	1: "boot_image",
	2: "firmware",
	3: "id",
	4: "interfaces",
	5: "name",
	6: "provision",
	7: "tags",
	8: "uid",
}

// Decode decodes Host from json.
func (s *Host) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Host to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bonds":
			if err := func() error {
				s.Bonds = make([]NilHostBondsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilHostBondsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Bonds = append(s.Bonds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bonds\"")
			}
		case "boot_image":
			if err := func() error {
				s.BootImage.Reset()
				if err := s.BootImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_image\"")
			}
		case "firmware":
			if err := func() error {
				s.Firmware.Reset()
				if err := s.Firmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firmware\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "interfaces":
			if err := func() error {
				s.Interfaces = make([]NilHostInterfacesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilHostInterfacesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Interfaces = append(s.Interfaces, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interfaces\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision":
			if err := func() error {
				s.Provision.Reset()
				if err := s.Provision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision\"")
			}
		case "tags":
			if err := func() error {
				s.Tags = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Tags = append(s.Tags, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tags\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Host")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Host) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Host) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HostBondsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HostBondsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Peers != nil {
			e.FieldStart("peers")
			e.ArrStart()
			for _, elem := range s.Peers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfHostBondsItem = [9]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "peers",
	8: "vlan",
}

// Decode decodes HostBondsItem from json.
func (s *HostBondsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HostBondsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "peers":
			if err := func() error {
				s.Peers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Peers = append(s.Peers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peers\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HostBondsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HostBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HostBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HostInterfacesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HostInterfacesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfHostInterfacesItem = [8]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "vlan",
}

// Decode decodes HostInterfacesItem from json.
func (s *HostInterfacesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HostInterfacesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HostInterfacesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HostInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HostInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *JobMessage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *JobMessage) encodeFields(e *jx.Encoder) {
	{
		if s.Host.Set {
			e.FieldStart("host")
			s.Host.Encode(e)
		}
	}
	{
		if s.Msg.Set {
			e.FieldStart("msg")
			s.Msg.Encode(e)
		}
	}
	{
		if s.RedfishError.Set {
			e.FieldStart("redfish_error")
			s.RedfishError.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfJobMessage = [4]string{
	0: "host",
	1: "msg",
	2: "redfish_error",
	3: "status",
}

// Decode decodes JobMessage from json.
func (s *JobMessage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode JobMessage to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host\"")
			}
		case "msg":
			if err := func() error {
				s.Msg.Reset()
				if err := s.Msg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"msg\"")
			}
		case "redfish_error":
			if err := func() error {
				s.RedfishError.Reset()
				if err := s.RedfishError.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redfish_error\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode JobMessage")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *JobMessage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *JobMessage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *JobMessageRedfishError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *JobMessageRedfishError) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfJobMessageRedfishError = [2]string{
	0: "code",
	1: "error",
}

// Decode decodes JobMessageRedfishError from json.
func (s *JobMessageRedfishError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode JobMessageRedfishError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode JobMessageRedfishError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *JobMessageRedfishError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *JobMessageRedfishError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *JobMessageRedfishErrorError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *JobMessageRedfishErrorError) encodeFields(e *jx.Encoder) {
	{
		if s.MessageDotExtendedInfo.Set {
			e.FieldStart("@Message.ExtendedInfo")
			s.MessageDotExtendedInfo.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfJobMessageRedfishErrorError = [3]string{
	0: "@Message.ExtendedInfo",
	1: "code",
	2: "message",
}

// Decode decodes JobMessageRedfishErrorError from json.
func (s *JobMessageRedfishErrorError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode JobMessageRedfishErrorError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "@Message.ExtendedInfo":
			if err := func() error {
				s.MessageDotExtendedInfo.Reset()
				if err := s.MessageDotExtendedInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@Message.ExtendedInfo\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode JobMessageRedfishErrorError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *JobMessageRedfishErrorError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *JobMessageRedfishErrorError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *JobMessageRedfishErrorErrorMessageDotExtendedInfoItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *JobMessageRedfishErrorErrorMessageDotExtendedInfoItem) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("Message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageArgsDotOdataDotCount.Set {
			e.FieldStart("MessageArgs.@odata.count")
			s.MessageArgsDotOdataDotCount.Encode(e)
		}
	}
	{
		if s.MessageId.Set {
			e.FieldStart("MessageId")
			s.MessageId.Encode(e)
		}
	}
	{
		if s.RelatedPropertiesDotOdataDotCount.Set {
			e.FieldStart("RelatedProperties.@odata.count")
			s.RelatedPropertiesDotOdataDotCount.Encode(e)
		}
	}
	{
		if s.Resolution.Set {
			e.FieldStart("Resolution")
			s.Resolution.Encode(e)
		}
	}
	{
		if s.Severity.Set {
			e.FieldStart("Severity")
			s.Severity.Encode(e)
		}
	}
}

var jsonFieldsNameOfJobMessageRedfishErrorErrorMessageDotExtendedInfoItem = [6]string{
	0: "Message",
	1: "MessageArgs.@odata.count",
	2: "MessageId",
	3: "RelatedProperties.@odata.count",
	4: "Resolution",
	5: "Severity",
}

// Decode decodes JobMessageRedfishErrorErrorMessageDotExtendedInfoItem from json.
func (s *JobMessageRedfishErrorErrorMessageDotExtendedInfoItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode JobMessageRedfishErrorErrorMessageDotExtendedInfoItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Message\"")
			}
		case "MessageArgs.@odata.count":
			if err := func() error {
				s.MessageArgsDotOdataDotCount.Reset()
				if err := s.MessageArgsDotOdataDotCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageArgs.@odata.count\"")
			}
		case "MessageId":
			if err := func() error {
				s.MessageId.Reset()
				if err := s.MessageId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageId\"")
			}
		case "RelatedProperties.@odata.count":
			if err := func() error {
				s.RelatedPropertiesDotOdataDotCount.Reset()
				if err := s.RelatedPropertiesDotOdataDotCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RelatedProperties.@odata.count\"")
			}
		case "Resolution":
			if err := func() error {
				s.Resolution.Reset()
				if err := s.Resolution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Resolution\"")
			}
		case "Severity":
			if err := func() error {
				s.Severity.Reset()
				if err := s.Severity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Severity\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode JobMessageRedfishErrorErrorMessageDotExtendedInfoItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *JobMessageRedfishErrorErrorMessageDotExtendedInfoItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *JobMessageRedfishErrorErrorMessageDotExtendedInfoItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BootImageAddRequestBootImagesItem as json.
func (o NilBootImageAddRequestBootImagesItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BootImageAddRequestBootImagesItem from json.
func (o *NilBootImageAddRequestBootImagesItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBootImageAddRequestBootImagesItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BootImageAddRequestBootImagesItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBootImageAddRequestBootImagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBootImageAddRequestBootImagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDumpHostsItem as json.
func (o NilDataDumpHostsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataDumpHostsItem from json.
func (o *NilDataDumpHostsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDataDumpHostsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DataDumpHostsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDataDumpHostsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDataDumpHostsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDumpHostsItemBondsItem as json.
func (o NilDataDumpHostsItemBondsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataDumpHostsItemBondsItem from json.
func (o *NilDataDumpHostsItemBondsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDataDumpHostsItemBondsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DataDumpHostsItemBondsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDataDumpHostsItemBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDataDumpHostsItemBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDumpHostsItemInterfacesItem as json.
func (o NilDataDumpHostsItemInterfacesItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataDumpHostsItemInterfacesItem from json.
func (o *NilDataDumpHostsItemInterfacesItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDataDumpHostsItemInterfacesItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DataDumpHostsItemInterfacesItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDataDumpHostsItemInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDataDumpHostsItemInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDumpImagesItem as json.
func (o NilDataDumpImagesItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataDumpImagesItem from json.
func (o *NilDataDumpImagesItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDataDumpImagesItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DataDumpImagesItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDataDumpImagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDataDumpImagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HostBondsItem as json.
func (o NilHostBondsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HostBondsItem from json.
func (o *NilHostBondsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilHostBondsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v HostBondsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilHostBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilHostBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HostInterfacesItem as json.
func (o NilHostInterfacesItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HostInterfacesItem from json.
func (o *NilHostInterfacesItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilHostInterfacesItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v HostInterfacesItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilHostInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilHostInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *NilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NodeAddRequestNodeListItem as json.
func (o NilNodeAddRequestNodeListItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NodeAddRequestNodeListItem from json.
func (o *NilNodeAddRequestNodeListItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNodeAddRequestNodeListItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NodeAddRequestNodeListItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNodeAddRequestNodeListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNodeAddRequestNodeListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NodeAddRequestNodeListItemBondsItem as json.
func (o NilNodeAddRequestNodeListItemBondsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NodeAddRequestNodeListItemBondsItem from json.
func (o *NilNodeAddRequestNodeListItemBondsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNodeAddRequestNodeListItemBondsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NodeAddRequestNodeListItemBondsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNodeAddRequestNodeListItemBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNodeAddRequestNodeListItemBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NodeAddRequestNodeListItemInterfacesItem as json.
func (o NilNodeAddRequestNodeListItemInterfacesItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NodeAddRequestNodeListItemInterfacesItem from json.
func (o *NilNodeAddRequestNodeListItemInterfacesItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNodeAddRequestNodeListItemInterfacesItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NodeAddRequestNodeListItemInterfacesItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilNodeAddRequestNodeListItemInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilNodeAddRequestNodeListItemInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishJobJobsItem as json.
func (o NilRedfishJobJobsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishJobJobsItem from json.
func (o *NilRedfishJobJobsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilRedfishJobJobsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RedfishJobJobsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilRedfishJobJobsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilRedfishJobJobsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishMetricReportReportsItem as json.
func (o NilRedfishMetricReportReportsItem) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishMetricReportReportsItem from json.
func (o *NilRedfishMetricReportReportsItem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilRedfishMetricReportReportsItem to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RedfishMetricReportReportsItem
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilRedfishMetricReportReportsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilRedfishMetricReportReportsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeAddRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeAddRequest) encodeFields(e *jx.Encoder) {
	{
		if s.NodeList != nil {
			e.FieldStart("node_list")
			e.ArrStart()
			for _, elem := range s.NodeList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfNodeAddRequest = [1]string{
	0: "node_list",
}

// Decode decodes NodeAddRequest from json.
func (s *NodeAddRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeAddRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "node_list":
			if err := func() error {
				s.NodeList = make([]NilNodeAddRequestNodeListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilNodeAddRequestNodeListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NodeList = append(s.NodeList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"node_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeAddRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeAddRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeAddRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeAddRequestNodeListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeAddRequestNodeListItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bonds != nil {
			e.FieldStart("bonds")
			e.ArrStart()
			for _, elem := range s.Bonds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BootImage.Set {
			e.FieldStart("boot_image")
			s.BootImage.Encode(e)
		}
	}
	{
		if s.Firmware.Set {
			e.FieldStart("firmware")
			s.Firmware.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Interfaces != nil {
			e.FieldStart("interfaces")
			e.ArrStart()
			for _, elem := range s.Interfaces {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Provision.Set {
			e.FieldStart("provision")
			s.Provision.Encode(e)
		}
	}
	{
		if s.Tags != nil {
			e.FieldStart("tags")
			e.ArrStart()
			for _, elem := range s.Tags {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeAddRequestNodeListItem = [9]string{
	0: "bonds",
	1: "boot_image",
	2: "firmware",
	3: "id",
	4: "interfaces",
	5: "name",
	6: "provision",
	7: "tags",
	8: "uid",
}

// Decode decodes NodeAddRequestNodeListItem from json.
func (s *NodeAddRequestNodeListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeAddRequestNodeListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bonds":
			if err := func() error {
				s.Bonds = make([]NilNodeAddRequestNodeListItemBondsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilNodeAddRequestNodeListItemBondsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Bonds = append(s.Bonds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bonds\"")
			}
		case "boot_image":
			if err := func() error {
				s.BootImage.Reset()
				if err := s.BootImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_image\"")
			}
		case "firmware":
			if err := func() error {
				s.Firmware.Reset()
				if err := s.Firmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firmware\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "interfaces":
			if err := func() error {
				s.Interfaces = make([]NilNodeAddRequestNodeListItemInterfacesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilNodeAddRequestNodeListItemInterfacesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Interfaces = append(s.Interfaces, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interfaces\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "provision":
			if err := func() error {
				s.Provision.Reset()
				if err := s.Provision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision\"")
			}
		case "tags":
			if err := func() error {
				s.Tags = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Tags = append(s.Tags, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tags\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeAddRequestNodeListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeAddRequestNodeListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeAddRequestNodeListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeAddRequestNodeListItemBondsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeAddRequestNodeListItemBondsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Peers != nil {
			e.FieldStart("peers")
			e.ArrStart()
			for _, elem := range s.Peers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeAddRequestNodeListItemBondsItem = [9]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "peers",
	8: "vlan",
}

// Decode decodes NodeAddRequestNodeListItemBondsItem from json.
func (s *NodeAddRequestNodeListItemBondsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeAddRequestNodeListItemBondsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "peers":
			if err := func() error {
				s.Peers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Peers = append(s.Peers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peers\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeAddRequestNodeListItemBondsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeAddRequestNodeListItemBondsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeAddRequestNodeListItemBondsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeAddRequestNodeListItemInterfacesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeAddRequestNodeListItemInterfacesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bmc.Set {
			e.FieldStart("bmc")
			s.Bmc.Encode(e)
		}
	}
	{
		if s.Fqdn.Set {
			e.FieldStart("fqdn")
			s.Fqdn.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Ifname.Set {
			e.FieldStart("ifname")
			s.Ifname.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.MAC.Set {
			e.FieldStart("mac")
			s.MAC.Encode(e)
		}
	}
	{
		if s.Mtu.Set {
			e.FieldStart("mtu")
			s.Mtu.Encode(e)
		}
	}
	{
		if s.Vlan.Set {
			e.FieldStart("vlan")
			s.Vlan.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeAddRequestNodeListItemInterfacesItem = [8]string{
	0: "bmc",
	1: "fqdn",
	2: "id",
	3: "ifname",
	4: "ip",
	5: "mac",
	6: "mtu",
	7: "vlan",
}

// Decode decodes NodeAddRequestNodeListItemInterfacesItem from json.
func (s *NodeAddRequestNodeListItemInterfacesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeAddRequestNodeListItemInterfacesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bmc":
			if err := func() error {
				s.Bmc.Reset()
				if err := s.Bmc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bmc\"")
			}
		case "fqdn":
			if err := func() error {
				s.Fqdn.Reset()
				if err := s.Fqdn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fqdn\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ifname":
			if err := func() error {
				s.Ifname.Reset()
				if err := s.Ifname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ifname\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "mac":
			if err := func() error {
				s.MAC.Reset()
				if err := s.MAC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac\"")
			}
		case "mtu":
			if err := func() error {
				s.Mtu.Reset()
				if err := s.Mtu.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mtu\"")
			}
		case "vlan":
			if err := func() error {
				s.Vlan.Reset()
				if err := s.Vlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlan\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeAddRequestNodeListItemInterfacesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeAddRequestNodeListItemInterfacesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeAddRequestNodeListItemInterfacesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeBootImageRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeBootImageRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Image.Set {
			e.FieldStart("image")
			s.Image.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeBootImageRequest = [1]string{
	0: "image",
}

// Decode decodes NodeBootImageRequest from json.
func (s *NodeBootImageRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeBootImageRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "image":
			if err := func() error {
				s.Image.Reset()
				if err := s.Image.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeBootImageRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeBootImageRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeBootImageRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeBootTokenResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeBootTokenResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Nodes != nil {
			e.FieldStart("nodes")
			e.ArrStart()
			for _, elem := range s.Nodes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfNodeBootTokenResponse = [1]string{
	0: "nodes",
}

// Decode decodes NodeBootTokenResponse from json.
func (s *NodeBootTokenResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeBootTokenResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "nodes":
			if err := func() error {
				s.Nodes = make([]NodeBootTokenResponseNodesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NodeBootTokenResponseNodesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Nodes = append(s.Nodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nodes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeBootTokenResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeBootTokenResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeBootTokenResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeBootTokenResponseNodesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeBootTokenResponseNodesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeBootTokenResponseNodesItem = [2]string{
	0: "name",
	1: "token",
}

// Decode decodes NodeBootTokenResponseNodesItem from json.
func (s *NodeBootTokenResponseNodesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeBootTokenResponseNodesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeBootTokenResponseNodesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeBootTokenResponseNodesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeBootTokenResponseNodesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeProvisionRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeProvisionRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Provision.Set {
			e.FieldStart("provision")
			s.Provision.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeProvisionRequest = [1]string{
	0: "provision",
}

// Decode decodes NodeProvisionRequest from json.
func (s *NodeProvisionRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeProvisionRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "provision":
			if err := func() error {
				s.Provision.Reset()
				if err := s.Provision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeProvisionRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeProvisionRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeProvisionRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NodeTagsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NodeTagsRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Tags.Set {
			e.FieldStart("tags")
			s.Tags.Encode(e)
		}
	}
}

var jsonFieldsNameOfNodeTagsRequest = [1]string{
	0: "tags",
}

// Decode decodes NodeTagsRequest from json.
func (s *NodeTagsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NodeTagsRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tags":
			if err := func() error {
				s.Tags.Reset()
				if err := s.Tags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tags\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NodeTagsRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NodeTagsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NodeTagsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes EventJobMessagesItemRedfishError as json.
func (o OptEventJobMessagesItemRedfishError) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EventJobMessagesItemRedfishError from json.
func (o *OptEventJobMessagesItemRedfishError) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEventJobMessagesItemRedfishError to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEventJobMessagesItemRedfishError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEventJobMessagesItemRedfishError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventJobMessagesItemRedfishErrorError as json.
func (o OptEventJobMessagesItemRedfishErrorError) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EventJobMessagesItemRedfishErrorError from json.
func (o *OptEventJobMessagesItemRedfishErrorError) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEventJobMessagesItemRedfishErrorError to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEventJobMessagesItemRedfishErrorError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEventJobMessagesItemRedfishErrorError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat32 to nil")
	}
	o.Set = true
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HTTPErrorErrorsItemMore as json.
func (o OptHTTPErrorErrorsItemMore) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HTTPErrorErrorsItemMore from json.
func (o *OptHTTPErrorErrorsItemMore) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHTTPErrorErrorsItemMore to nil")
	}
	o.Set = true
	o.Value = make(HTTPErrorErrorsItemMore)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHTTPErrorErrorsItemMore) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHTTPErrorErrorsItemMore) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes JobMessageRedfishError as json.
func (o OptJobMessageRedfishError) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes JobMessageRedfishError from json.
func (o *OptJobMessageRedfishError) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptJobMessageRedfishError to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptJobMessageRedfishError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptJobMessageRedfishError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes JobMessageRedfishErrorError as json.
func (o OptJobMessageRedfishErrorError) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes JobMessageRedfishErrorError from json.
func (o *OptJobMessageRedfishErrorError) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptJobMessageRedfishErrorError to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptJobMessageRedfishErrorError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptJobMessageRedfishErrorError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BootImageAddRequestBootImagesItemProvisionTemplates as json.
func (o OptNilBootImageAddRequestBootImagesItemProvisionTemplates) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BootImageAddRequestBootImagesItemProvisionTemplates from json.
func (o *OptNilBootImageAddRequestBootImagesItemProvisionTemplates) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBootImageAddRequestBootImagesItemProvisionTemplates to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BootImageAddRequestBootImagesItemProvisionTemplates
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make(BootImageAddRequestBootImagesItemProvisionTemplates)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBootImageAddRequestBootImagesItemProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBootImageAddRequestBootImagesItemProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BootImageProvisionTemplates as json.
func (o OptNilBootImageProvisionTemplates) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BootImageProvisionTemplates from json.
func (o *OptNilBootImageProvisionTemplates) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBootImageProvisionTemplates to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BootImageProvisionTemplates
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make(BootImageProvisionTemplates)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBootImageProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBootImageProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataDumpImagesItemProvisionTemplates as json.
func (o OptNilDataDumpImagesItemProvisionTemplates) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataDumpImagesItemProvisionTemplates from json.
func (o *OptNilDataDumpImagesItemProvisionTemplates) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDataDumpImagesItemProvisionTemplates to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DataDumpImagesItemProvisionTemplates
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make(DataDumpImagesItemProvisionTemplates)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDataDumpImagesItemProvisionTemplates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDataDumpImagesItemProvisionTemplates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []HTTPErrorErrorsItem as json.
func (o OptNilHTTPErrorErrorsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []HTTPErrorErrorsItem from json.
func (o *OptNilHTTPErrorErrorsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilHTTPErrorErrorsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []HTTPErrorErrorsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]HTTPErrorErrorsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem HTTPErrorErrorsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilHTTPErrorErrorsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilHTTPErrorErrorsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptNilInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptNilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []JobMessageRedfishErrorErrorMessageDotExtendedInfoItem as json.
func (o OptNilJobMessageRedfishErrorErrorMessageDotExtendedInfoItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []JobMessageRedfishErrorErrorMessageDotExtendedInfoItem from json.
func (o *OptNilJobMessageRedfishErrorErrorMessageDotExtendedInfoItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilJobMessageRedfishErrorErrorMessageDotExtendedInfoItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []JobMessageRedfishErrorErrorMessageDotExtendedInfoItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]JobMessageRedfishErrorErrorMessageDotExtendedInfoItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem JobMessageRedfishErrorErrorMessageDotExtendedInfoItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilJobMessageRedfishErrorErrorMessageDotExtendedInfoItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilJobMessageRedfishErrorErrorMessageDotExtendedInfoItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []NilInt as json.
func (o OptNilNilIntArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []NilInt from json.
func (o *OptNilNilIntArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilNilIntArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []NilInt
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]NilInt, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem NilInt
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilNilIntArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilNilIntArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []NilString as json.
func (o OptNilNilStringArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []NilString from json.
func (o *OptNilNilStringArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilNilStringArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []NilString
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]NilString, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem NilString
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilNilStringArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilNilStringArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishJobJobsItemPayload as json.
func (o OptRedfishJobJobsItemPayload) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishJobJobsItemPayload from json.
func (o *OptRedfishJobJobsItemPayload) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRedfishJobJobsItemPayload to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRedfishJobJobsItemPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRedfishJobJobsItemPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishJobJobsItemSchedule as json.
func (o OptRedfishJobJobsItemSchedule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishJobJobsItemSchedule from json.
func (o *OptRedfishJobJobsItemSchedule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRedfishJobJobsItemSchedule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRedfishJobJobsItemSchedule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRedfishJobJobsItemSchedule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishSystemOem as json.
func (o OptRedfishSystemOem) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishSystemOem from json.
func (o *OptRedfishSystemOem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRedfishSystemOem to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRedfishSystemOem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRedfishSystemOem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishSystemOemDell as json.
func (o OptRedfishSystemOemDell) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishSystemOemDell from json.
func (o *OptRedfishSystemOemDell) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRedfishSystemOemDell to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRedfishSystemOemDell) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRedfishSystemOemDell) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedfishSystemOemDellDellSystem as json.
func (o OptRedfishSystemOemDellDellSystem) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedfishSystemOemDellDellSystem from json.
func (o *OptRedfishSystemOemDellDellSystem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRedfishSystemOemDellDellSystem to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRedfishSystemOemDellDellSystem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRedfishSystemOemDellDellSystem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishJob) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishJob) encodeFields(e *jx.Encoder) {
	{
		if s.Jobs != nil {
			e.FieldStart("jobs")
			e.ArrStart()
			for _, elem := range s.Jobs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishJob = [2]string{
	0: "jobs",
	1: "name",
}

// Decode decodes RedfishJob from json.
func (s *RedfishJob) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishJob to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "jobs":
			if err := func() error {
				s.Jobs = make([]NilRedfishJobJobsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilRedfishJobJobsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Jobs = append(s.Jobs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jobs\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishJob")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishJob) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishJob) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishJobJobsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishJobJobsItem) encodeFields(e *jx.Encoder) {
	{
		if s.OdataDotContext.Set {
			e.FieldStart("@odata.context")
			s.OdataDotContext.Encode(e)
		}
	}
	{
		if s.OdataDotID.Set {
			e.FieldStart("@odata.id")
			s.OdataDotID.Encode(e)
		}
	}
	{
		if s.OdataDotType.Set {
			e.FieldStart("@odata.type")
			s.OdataDotType.Encode(e)
		}
	}
	{
		if s.CreatedBy.Set {
			e.FieldStart("CreatedBy")
			s.CreatedBy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("Description")
			s.Description.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("EndTime")
			s.EndTime.Encode(e)
		}
	}
	{
		if s.EstimatedDuration.Set {
			e.FieldStart("EstimatedDuration")
			s.EstimatedDuration.Encode(e)
		}
	}
	{
		if s.HidePayload.Set {
			e.FieldStart("HidePayload")
			s.HidePayload.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("Id")
			s.ID.Encode(e)
		}
	}
	{
		if s.JobState.Set {
			e.FieldStart("JobState")
			s.JobState.Encode(e)
		}
	}
	{
		if s.JobStatus.Set {
			e.FieldStart("JobStatus")
			s.JobStatus.Encode(e)
		}
	}
	{
		if s.MaxExecutionTime.Set {
			e.FieldStart("MaxExecutionTime")
			s.MaxExecutionTime.Encode(e)
		}
	}
	{
		if s.Messages != nil {
			e.FieldStart("Messages")
			e.ArrStart()
			for _, elem := range s.Messages {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Payload.Set {
			e.FieldStart("Payload")
			s.Payload.Encode(e)
		}
	}
	{
		if s.PercentComplete.Set {
			e.FieldStart("PercentComplete")
			s.PercentComplete.Encode(e)
		}
	}
	{
		if s.Schedule.Set {
			e.FieldStart("Schedule")
			s.Schedule.Encode(e)
		}
	}
	{
		if s.StartTime.Set {
			e.FieldStart("StartTime")
			s.StartTime.Encode(e)
		}
	}
	{
		if s.StepOrder.Set {
			e.FieldStart("StepOrder")
			s.StepOrder.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishJobJobsItem = [19]string{
	0:  "@odata.context",
	1:  "@odata.id",
	2:  "@odata.type",
	3:  "CreatedBy",
	4:  "Description",
	5:  "EndTime",
	6:  "EstimatedDuration",
	7:  "HidePayload",
	8:  "Id",
	9:  "JobState",
	10: "JobStatus",
	11: "MaxExecutionTime",
	12: "Messages",
	13: "Name",
	14: "Payload",
	15: "PercentComplete",
	16: "Schedule",
	17: "StartTime",
	18: "StepOrder",
}

// Decode decodes RedfishJobJobsItem from json.
func (s *RedfishJobJobsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishJobJobsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "@odata.context":
			if err := func() error {
				s.OdataDotContext.Reset()
				if err := s.OdataDotContext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.context\"")
			}
		case "@odata.id":
			if err := func() error {
				s.OdataDotID.Reset()
				if err := s.OdataDotID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.id\"")
			}
		case "@odata.type":
			if err := func() error {
				s.OdataDotType.Reset()
				if err := s.OdataDotType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.type\"")
			}
		case "CreatedBy":
			if err := func() error {
				s.CreatedBy.Reset()
				if err := s.CreatedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CreatedBy\"")
			}
		case "Description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Description\"")
			}
		case "EndTime":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EndTime\"")
			}
		case "EstimatedDuration":
			if err := func() error {
				s.EstimatedDuration.Reset()
				if err := s.EstimatedDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EstimatedDuration\"")
			}
		case "HidePayload":
			if err := func() error {
				s.HidePayload.Reset()
				if err := s.HidePayload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HidePayload\"")
			}
		case "Id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Id\"")
			}
		case "JobState":
			if err := func() error {
				s.JobState.Reset()
				if err := s.JobState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JobState\"")
			}
		case "JobStatus":
			if err := func() error {
				s.JobStatus.Reset()
				if err := s.JobStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JobStatus\"")
			}
		case "MaxExecutionTime":
			if err := func() error {
				s.MaxExecutionTime.Reset()
				if err := s.MaxExecutionTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MaxExecutionTime\"")
			}
		case "Messages":
			if err := func() error {
				s.Messages = make([]RedfishJobJobsItemMessagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RedfishJobJobsItemMessagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Messages = append(s.Messages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Messages\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "Payload":
			if err := func() error {
				s.Payload.Reset()
				if err := s.Payload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Payload\"")
			}
		case "PercentComplete":
			if err := func() error {
				s.PercentComplete.Reset()
				if err := s.PercentComplete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PercentComplete\"")
			}
		case "Schedule":
			if err := func() error {
				s.Schedule.Reset()
				if err := s.Schedule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Schedule\"")
			}
		case "StartTime":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"StartTime\"")
			}
		case "StepOrder":
			if err := func() error {
				s.StepOrder.Reset()
				if err := s.StepOrder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"StepOrder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishJobJobsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishJobJobsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishJobJobsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishJobJobsItemMessagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishJobJobsItemMessagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.OdataDotID.Set {
			e.FieldStart("@odata.id")
			s.OdataDotID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("Id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("Message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageArgs != nil {
			e.FieldStart("MessageArgs")
			e.ArrStart()
			for _, elem := range s.MessageArgs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MessageId.Set {
			e.FieldStart("MessageId")
			s.MessageId.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RelatedProperties.Set {
			e.FieldStart("RelatedProperties")
			s.RelatedProperties.Encode(e)
		}
	}
	{
		if s.Resolution.Set {
			e.FieldStart("Resolution")
			s.Resolution.Encode(e)
		}
	}
	{
		if s.Severity.Set {
			e.FieldStart("Severity")
			s.Severity.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishJobJobsItemMessagesItem = [9]string{
	0: "@odata.id",
	1: "Id",
	2: "Message",
	3: "MessageArgs",
	4: "MessageId",
	5: "Name",
	6: "RelatedProperties",
	7: "Resolution",
	8: "Severity",
}

// Decode decodes RedfishJobJobsItemMessagesItem from json.
func (s *RedfishJobJobsItemMessagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishJobJobsItemMessagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "@odata.id":
			if err := func() error {
				s.OdataDotID.Reset()
				if err := s.OdataDotID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.id\"")
			}
		case "Id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Id\"")
			}
		case "Message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Message\"")
			}
		case "MessageArgs":
			if err := func() error {
				s.MessageArgs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MessageArgs = append(s.MessageArgs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageArgs\"")
			}
		case "MessageId":
			if err := func() error {
				s.MessageId.Reset()
				if err := s.MessageId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MessageId\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "RelatedProperties":
			if err := func() error {
				s.RelatedProperties.Reset()
				if err := s.RelatedProperties.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RelatedProperties\"")
			}
		case "Resolution":
			if err := func() error {
				s.Resolution.Reset()
				if err := s.Resolution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Resolution\"")
			}
		case "Severity":
			if err := func() error {
				s.Severity.Reset()
				if err := s.Severity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Severity\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishJobJobsItemMessagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishJobJobsItemMessagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishJobJobsItemMessagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishJobJobsItemPayload) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishJobJobsItemPayload) encodeFields(e *jx.Encoder) {
	{
		if s.HttpHeaders.Set {
			e.FieldStart("HttpHeaders")
			s.HttpHeaders.Encode(e)
		}
	}
	{
		if s.HttpOperation.Set {
			e.FieldStart("HttpOperation")
			s.HttpOperation.Encode(e)
		}
	}
	{
		if s.JsonBody.Set {
			e.FieldStart("JsonBody")
			s.JsonBody.Encode(e)
		}
	}
	{
		if s.TargetUri.Set {
			e.FieldStart("TargetUri")
			s.TargetUri.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishJobJobsItemPayload = [4]string{
	0: "HttpHeaders",
	1: "HttpOperation",
	2: "JsonBody",
	3: "TargetUri",
}

// Decode decodes RedfishJobJobsItemPayload from json.
func (s *RedfishJobJobsItemPayload) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishJobJobsItemPayload to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "HttpHeaders":
			if err := func() error {
				s.HttpHeaders.Reset()
				if err := s.HttpHeaders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HttpHeaders\"")
			}
		case "HttpOperation":
			if err := func() error {
				s.HttpOperation.Reset()
				if err := s.HttpOperation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HttpOperation\"")
			}
		case "JsonBody":
			if err := func() error {
				s.JsonBody.Reset()
				if err := s.JsonBody.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JsonBody\"")
			}
		case "TargetUri":
			if err := func() error {
				s.TargetUri.Reset()
				if err := s.TargetUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TargetUri\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishJobJobsItemPayload")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishJobJobsItemPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishJobJobsItemPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishJobJobsItemSchedule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishJobJobsItemSchedule) encodeFields(e *jx.Encoder) {
	{
		if s.EnabledDaysOfMonth.Set {
			e.FieldStart("EnabledDaysOfMonth")
			s.EnabledDaysOfMonth.Encode(e)
		}
	}
	{
		if s.EnabledDaysOfWeek.Set {
			e.FieldStart("EnabledDaysOfWeek")
			s.EnabledDaysOfWeek.Encode(e)
		}
	}
	{
		if s.EnabledIntervals.Set {
			e.FieldStart("EnabledIntervals")
			s.EnabledIntervals.Encode(e)
		}
	}
	{
		if s.EnabledMonthsOfYear.Set {
			e.FieldStart("EnabledMonthsOfYear")
			s.EnabledMonthsOfYear.Encode(e)
		}
	}
	{
		if s.InitialStartTime.Set {
			e.FieldStart("InitialStartTime")
			s.InitialStartTime.Encode(e)
		}
	}
	{
		if s.Lifetime.Set {
			e.FieldStart("Lifetime")
			s.Lifetime.Encode(e)
		}
	}
	{
		if s.MaxOccurrences.Set {
			e.FieldStart("MaxOccurrences")
			s.MaxOccurrences.Encode(e)
		}
	}
	{
		if s.RecurrenceInterval.Set {
			e.FieldStart("RecurrenceInterval")
			s.RecurrenceInterval.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishJobJobsItemSchedule = [8]string{
	0: "EnabledDaysOfMonth",
	1: "EnabledDaysOfWeek",
	2: "EnabledIntervals",
	3: "EnabledMonthsOfYear",
	4: "InitialStartTime",
	5: "Lifetime",
	6: "MaxOccurrences",
	7: "RecurrenceInterval",
}

// Decode decodes RedfishJobJobsItemSchedule from json.
func (s *RedfishJobJobsItemSchedule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishJobJobsItemSchedule to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "EnabledDaysOfMonth":
			if err := func() error {
				s.EnabledDaysOfMonth.Reset()
				if err := s.EnabledDaysOfMonth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EnabledDaysOfMonth\"")
			}
		case "EnabledDaysOfWeek":
			if err := func() error {
				s.EnabledDaysOfWeek.Reset()
				if err := s.EnabledDaysOfWeek.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EnabledDaysOfWeek\"")
			}
		case "EnabledIntervals":
			if err := func() error {
				s.EnabledIntervals.Reset()
				if err := s.EnabledIntervals.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EnabledIntervals\"")
			}
		case "EnabledMonthsOfYear":
			if err := func() error {
				s.EnabledMonthsOfYear.Reset()
				if err := s.EnabledMonthsOfYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EnabledMonthsOfYear\"")
			}
		case "InitialStartTime":
			if err := func() error {
				s.InitialStartTime.Reset()
				if err := s.InitialStartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"InitialStartTime\"")
			}
		case "Lifetime":
			if err := func() error {
				s.Lifetime.Reset()
				if err := s.Lifetime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Lifetime\"")
			}
		case "MaxOccurrences":
			if err := func() error {
				s.MaxOccurrences.Reset()
				if err := s.MaxOccurrences.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MaxOccurrences\"")
			}
		case "RecurrenceInterval":
			if err := func() error {
				s.RecurrenceInterval.Reset()
				if err := s.RecurrenceInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RecurrenceInterval\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishJobJobsItemSchedule")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishJobJobsItemSchedule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishJobJobsItemSchedule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishMetricReport) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishMetricReport) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Reports != nil {
			e.FieldStart("reports")
			e.ArrStart()
			for _, elem := range s.Reports {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRedfishMetricReport = [2]string{
	0: "name",
	1: "reports",
}

// Decode decodes RedfishMetricReport from json.
func (s *RedfishMetricReport) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishMetricReport to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "reports":
			if err := func() error {
				s.Reports = make([]NilRedfishMetricReportReportsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NilRedfishMetricReportReportsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Reports = append(s.Reports, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reports\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishMetricReport")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishMetricReport) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishMetricReport) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishMetricReportReportsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishMetricReportReportsItem) encodeFields(e *jx.Encoder) {
	{
		if s.OdataDotContext.Set {
			e.FieldStart("@odata.context")
			s.OdataDotContext.Encode(e)
		}
	}
	{
		if s.OdataDotEtag.Set {
			e.FieldStart("@odata.etag")
			s.OdataDotEtag.Encode(e)
		}
	}
	{
		if s.OdataDotID.Set {
			e.FieldStart("@odata.id")
			s.OdataDotID.Encode(e)
		}
	}
	{
		if s.OdataDotType.Set {
			e.FieldStart("@odata.type")
			s.OdataDotType.Encode(e)
		}
	}
	{
		if s.Context.Set {
			e.FieldStart("Context")
			s.Context.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("Description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("Id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MetricValues != nil {
			e.FieldStart("MetricValues")
			e.ArrStart()
			for _, elem := range s.MetricValues {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		if len(s.Oem) != 0 {
			e.FieldStart("Oem")
			e.Raw(s.Oem)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("Timestamp")
			s.Timestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishMetricReportReportsItem = [11]string{
	0:  "@odata.context",
	1:  "@odata.etag",
	2:  "@odata.id",
	3:  "@odata.type",
	4:  "Context",
	5:  "Description",
	6:  "Id",
	7:  "MetricValues",
	8:  "Name",
	9:  "Oem",
	10: "Timestamp",
}

// Decode decodes RedfishMetricReportReportsItem from json.
func (s *RedfishMetricReportReportsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishMetricReportReportsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "@odata.context":
			if err := func() error {
				s.OdataDotContext.Reset()
				if err := s.OdataDotContext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.context\"")
			}
		case "@odata.etag":
			if err := func() error {
				s.OdataDotEtag.Reset()
				if err := s.OdataDotEtag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.etag\"")
			}
		case "@odata.id":
			if err := func() error {
				s.OdataDotID.Reset()
				if err := s.OdataDotID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.id\"")
			}
		case "@odata.type":
			if err := func() error {
				s.OdataDotType.Reset()
				if err := s.OdataDotType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"@odata.type\"")
			}
		case "Context":
			if err := func() error {
				s.Context.Reset()
				if err := s.Context.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Context\"")
			}
		case "Description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Description\"")
			}
		case "Id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Id\"")
			}
		case "MetricValues":
			if err := func() error {
				s.MetricValues = make([]RedfishMetricReportReportsItemMetricValuesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RedfishMetricReportReportsItemMetricValuesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MetricValues = append(s.MetricValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MetricValues\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "Oem":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Oem = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Oem\"")
			}
		case "Timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishMetricReportReportsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishMetricReportReportsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishMetricReportReportsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishMetricReportReportsItemMetricValuesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishMetricReportReportsItemMetricValuesItem) encodeFields(e *jx.Encoder) {
	{
		if s.MetricID.Set {
			e.FieldStart("MetricID")
			s.MetricID.Encode(e)
		}
	}
	{
		if s.MetricProperty.Set {
			e.FieldStart("MetricProperty")
			s.MetricProperty.Encode(e)
		}
	}
	{
		if s.MetricValue.Set {
			e.FieldStart("MetricValue")
			s.MetricValue.Encode(e)
		}
	}
	{
		if len(s.Oem) != 0 {
			e.FieldStart("Oem")
			e.Raw(s.Oem)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("Timestamp")
			s.Timestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishMetricReportReportsItemMetricValuesItem = [5]string{
	0: "MetricID",
	1: "MetricProperty",
	2: "MetricValue",
	3: "Oem",
	4: "Timestamp",
}

// Decode decodes RedfishMetricReportReportsItemMetricValuesItem from json.
func (s *RedfishMetricReportReportsItemMetricValuesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishMetricReportReportsItemMetricValuesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "MetricID":
			if err := func() error {
				s.MetricID.Reset()
				if err := s.MetricID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MetricID\"")
			}
		case "MetricProperty":
			if err := func() error {
				s.MetricProperty.Reset()
				if err := s.MetricProperty.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MetricProperty\"")
			}
		case "MetricValue":
			if err := func() error {
				s.MetricValue.Reset()
				if err := s.MetricValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MetricValue\"")
			}
		case "Oem":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Oem = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Oem\"")
			}
		case "Timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishMetricReportReportsItemMetricValuesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishMetricReportReportsItemMetricValuesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishMetricReportReportsItemMetricValuesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishSystem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishSystem) encodeFields(e *jx.Encoder) {
	{
		if s.BiosVersion.Set {
			e.FieldStart("bios_version")
			s.BiosVersion.Encode(e)
		}
	}
	{
		if s.BootNext.Set {
			e.FieldStart("boot_next")
			s.BootNext.Encode(e)
		}
	}
	{
		if s.BootOrder != nil {
			e.FieldStart("boot_order")
			e.ArrStart()
			for _, elem := range s.BootOrder {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Health.Set {
			e.FieldStart("health")
			s.Health.Encode(e)
		}
	}
	{
		if s.HostName.Set {
			e.FieldStart("host_name")
			s.HostName.Encode(e)
		}
	}
	{
		if s.Manufacturer.Set {
			e.FieldStart("manufacturer")
			s.Manufacturer.Encode(e)
		}
	}
	{
		if s.Model.Set {
			e.FieldStart("model")
			s.Model.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Oem.Set {
			e.FieldStart("oem")
			s.Oem.Encode(e)
		}
	}
	{
		if s.PowerStatus.Set {
			e.FieldStart("power_status")
			s.PowerStatus.Encode(e)
		}
	}
	{
		if s.ProcessorCount.Set {
			e.FieldStart("processor_count")
			s.ProcessorCount.Encode(e)
		}
	}
	{
		if s.SerialNumber.Set {
			e.FieldStart("serial_number")
			s.SerialNumber.Encode(e)
		}
	}
	{
		if s.TotalMemory.Set {
			e.FieldStart("total_memory")
			s.TotalMemory.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishSystem = [13]string{
	0:  "bios_version",
	1:  "boot_next",
	2:  "boot_order",
	3:  "health",
	4:  "host_name",
	5:  "manufacturer",
	6:  "model",
	7:  "name",
	8:  "oem",
	9:  "power_status",
	10: "processor_count",
	11: "serial_number",
	12: "total_memory",
}

// Decode decodes RedfishSystem from json.
func (s *RedfishSystem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishSystem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bios_version":
			if err := func() error {
				s.BiosVersion.Reset()
				if err := s.BiosVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bios_version\"")
			}
		case "boot_next":
			if err := func() error {
				s.BootNext.Reset()
				if err := s.BootNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_next\"")
			}
		case "boot_order":
			if err := func() error {
				s.BootOrder = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BootOrder = append(s.BootOrder, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boot_order\"")
			}
		case "health":
			if err := func() error {
				s.Health.Reset()
				if err := s.Health.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"health\"")
			}
		case "host_name":
			if err := func() error {
				s.HostName.Reset()
				if err := s.HostName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_name\"")
			}
		case "manufacturer":
			if err := func() error {
				s.Manufacturer.Reset()
				if err := s.Manufacturer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manufacturer\"")
			}
		case "model":
			if err := func() error {
				s.Model.Reset()
				if err := s.Model.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"model\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "oem":
			if err := func() error {
				s.Oem.Reset()
				if err := s.Oem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oem\"")
			}
		case "power_status":
			if err := func() error {
				s.PowerStatus.Reset()
				if err := s.PowerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"power_status\"")
			}
		case "processor_count":
			if err := func() error {
				s.ProcessorCount.Reset()
				if err := s.ProcessorCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processor_count\"")
			}
		case "serial_number":
			if err := func() error {
				s.SerialNumber.Reset()
				if err := s.SerialNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"serial_number\"")
			}
		case "total_memory":
			if err := func() error {
				s.TotalMemory.Reset()
				if err := s.TotalMemory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_memory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishSystem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishSystem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishSystem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishSystemOem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishSystemOem) encodeFields(e *jx.Encoder) {
	{
		if s.Dell.Set {
			e.FieldStart("Dell")
			s.Dell.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishSystemOem = [1]string{
	0: "Dell",
}

// Decode decodes RedfishSystemOem from json.
func (s *RedfishSystemOem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishSystemOem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Dell":
			if err := func() error {
				s.Dell.Reset()
				if err := s.Dell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Dell\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishSystemOem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishSystemOem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishSystemOem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishSystemOemDell) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishSystemOemDell) encodeFields(e *jx.Encoder) {
	{
		if s.DellSystem.Set {
			e.FieldStart("DellSystem")
			s.DellSystem.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishSystemOemDell = [1]string{
	0: "DellSystem",
}

// Decode decodes RedfishSystemOemDell from json.
func (s *RedfishSystemOemDell) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishSystemOemDell to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "DellSystem":
			if err := func() error {
				s.DellSystem.Reset()
				if err := s.DellSystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DellSystem\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishSystemOemDell")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishSystemOemDell) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishSystemOemDell) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RedfishSystemOemDellDellSystem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RedfishSystemOemDellDellSystem) encodeFields(e *jx.Encoder) {
	{
		if s.ManagedSystemSize.Set {
			e.FieldStart("ManagedSystemSize")
			s.ManagedSystemSize.Encode(e)
		}
	}
	{
		if s.MaxCPUSockets.Set {
			e.FieldStart("MaxCPUSockets")
			s.MaxCPUSockets.Encode(e)
		}
	}
	{
		if s.MaxDIMMSlots.Set {
			e.FieldStart("MaxDIMMSlots")
			s.MaxDIMMSlots.Encode(e)
		}
	}
	{
		if s.MaxPCIeSlots.Set {
			e.FieldStart("MaxPCIeSlots")
			s.MaxPCIeSlots.Encode(e)
		}
	}
	{
		if s.SystemID.Set {
			e.FieldStart("SystemID")
			s.SystemID.Encode(e)
		}
	}
}

var jsonFieldsNameOfRedfishSystemOemDellDellSystem = [5]string{
	0: "ManagedSystemSize",
	1: "MaxCPUSockets",
	2: "MaxDIMMSlots",
	3: "MaxPCIeSlots",
	4: "SystemID",
}

// Decode decodes RedfishSystemOemDellDellSystem from json.
func (s *RedfishSystemOemDellDellSystem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedfishSystemOemDellDellSystem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ManagedSystemSize":
			if err := func() error {
				s.ManagedSystemSize.Reset()
				if err := s.ManagedSystemSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ManagedSystemSize\"")
			}
		case "MaxCPUSockets":
			if err := func() error {
				s.MaxCPUSockets.Reset()
				if err := s.MaxCPUSockets.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MaxCPUSockets\"")
			}
		case "MaxDIMMSlots":
			if err := func() error {
				s.MaxDIMMSlots.Reset()
				if err := s.MaxDIMMSlots.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MaxDIMMSlots\"")
			}
		case "MaxPCIeSlots":
			if err := func() error {
				s.MaxPCIeSlots.Reset()
				if err := s.MaxPCIeSlots.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MaxPCIeSlots\"")
			}
		case "SystemID":
			if err := func() error {
				s.SystemID.Reset()
				if err := s.SystemID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemID\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RedfishSystemOemDellDellSystem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RedfishSystemOemDellDellSystem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedfishSystemOemDellDellSystem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *User) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *User) encodeFields(e *jx.Encoder) {
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Hash.Set {
			e.FieldStart("hash")
			s.Hash.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ModifiedAt.Set {
			e.FieldStart("modified_at")
			s.ModifiedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfUser = [6]string{
	0: "created_at",
	1: "hash",
	2: "id",
	3: "modified_at",
	4: "role",
	5: "username",
}

// Decode decodes User from json.
func (s *User) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode User to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "hash":
			if err := func() error {
				s.Hash.Reset()
				if err := s.Hash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hash\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "modified_at":
			if err := func() error {
				s.ModifiedAt.Reset()
				if err := s.ModifiedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified_at\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode User")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *User) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *User) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserRoleRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserRoleRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserRoleRequest = [1]string{
	0: "role",
}

// Decode decodes UserRoleRequest from json.
func (s *UserRoleRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserRoleRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserRoleRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserRoleRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserRoleRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserStoreRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserStoreRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Password.Set {
			e.FieldStart("password")
			s.Password.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserStoreRequest = [2]string{
	0: "password",
	1: "username",
}

// Decode decodes UserStoreRequest from json.
func (s *UserStoreRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserStoreRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "password":
			if err := func() error {
				s.Password.Reset()
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserStoreRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserStoreRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserStoreRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserStoreResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserStoreResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserStoreResponse = [2]string{
	0: "role",
	1: "username",
}

// Decode decodes UserStoreResponse from json.
func (s *UserStoreResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserStoreResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserStoreResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserStoreResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserStoreResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
